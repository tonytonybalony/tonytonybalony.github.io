<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Google-Dorking</title>
      <link href="/Google-Dorking-Cheatsheet/"/>
      <url>/Google-Dorking-Cheatsheet/</url>
      
        <content type="html"><![CDATA[<p>This is an advanced way to search for information on Google, it is often used for finding sensitive information, hacking or testing certain aspects of cybersecurity. It is the practice of using advanced operators to filter search results.</p><table><thead><tr><th>Operators</th><th>Explanation</th><th>Sample Queries</th></tr></thead><tbody><tr><td><code>filetype:</code></td><td>Specifies the results file type.</td><td><code>filetype:pdf</code>,<code>filetype:xml</code>,<code>filetype:sql</code></td></tr><tr><td><code>inurl:</code></td><td>Locates pages that contain certain words in their URLs.</td><td><code>inurl:&quot;backup&quot;</code>,<code>inurl:&quot;/admin/&quot;</code>,<code>inurl:&quot;/login&quot;</code></td></tr><tr><td><code>intitle:</code></td><td>Locates pages that contain certain words in their titles.</td><td><code>intitle:&quot;index&quot;</code>,<code>intitle:&quot;login&quot;</code>,<code>intitle:&quot;settings&quot;</code></td></tr><tr><td><code>intext:</code></td><td>Search for pages that contain certain words in the content</td><td><code>intext:&quot;credentials&quot;</code>,<code>intext:&quot;password&quot;</code>,<code>intext:&quot;username&quot;</code></td></tr></tbody></table><h2 id="Real-World-Applications"><a href="#Real-World-Applications" class="headerlink" title="Real-World Applications"></a>Real-World Applications</h2><p><code>inurl:&quot;index.php?id=&quot;</code>: Searches for websites with SQL injections vulnerabilities.</p><p><code>filetype:log intext:&quot;password&quot; OR intext:&quot;username&quot;</code>: Searches for log files that may have debug or error logs with credential data accidentally left in them.</p><p><code>filetype:sql intext:&quot;password&quot;</code>: Searches for SQL dumps exposed with possible credentials.</p><h2 id="How-to-Prevent-Google-Dorking"><a href="#How-to-Prevent-Google-Dorking" class="headerlink" title="How to Prevent Google Dorking"></a>How to Prevent Google Dorking</h2><p><strong>robots.txt</strong>: Use this file to block search engines’ web crawlers from indexing sensitive directories.</p><p><strong>Vulnerability Scans</strong>: Ensure the security of your website.</p><p><strong>Google Search Console</strong>: Use the “Remove URLs” or “Removals” tool in it to quickly request that Google delists (removes) such URLs from its search results.</p><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><p>These are just a few of operators that I use the most, there are definitely more operators and applications for Google Dorking. Check out these website if you want to further understand this topic.</p><p><a href="https://www.geeksforgeeks.org/ethical-hacking/what-is-google-dorking/">Google Dorking Tutorials</a>, <a href="https://diogo-lages.github.io/master-google-dorking-ultimate-guide">Mastering Google Dorking</a>, <a href="https://gist.github.com/austinsonger/5b1dbb56d8c529ec1f378f506d206d80">Google Dorks Database</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Machine-Learning-Search</title>
      <link href="/Machine-Learning-Search/"/>
      <url>/Machine-Learning-Search/</url>
      
        <content type="html"><![CDATA[<p><strong>Search</strong> is finding a solution to a given problem. Search problems involve an initial state and a goal state, and returns a solution on how it gets from the former to the latter. </p><h2 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h2><p>An entity that perceives its environment and acts upon that environment. </p><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>A configuration of an agent in its environment.<br><strong>Initial State</strong> is the state from which the algorithm starts.<br><strong>Goal State</strong> is the state at which the algorithm should stop.</p><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>The choices that can be made in a state.</p><h2 id="Transition-Model"><a href="#Transition-Model" class="headerlink" title="Transition Model"></a>Transition Model</h2><p>A desciption of how a state take actions and moves from one to another, either as an algorithm or a set of rules.</p><h2 id="State-Space"><a href="#State-Space" class="headerlink" title="State Space"></a>State Space</h2><p>The set of all State reachable from the initial state by any sequence. Graphically, it looks like all the states that connect to each other by actions and form a graph structure called the State Space.</p><h1 id="Uninformed-First-Search"><a href="#Uninformed-First-Search" class="headerlink" title="Uninformed First Search"></a>Uninformed First Search</h1><p>Search strategies that use no problem-specific knowledge. </p><h2 id="Breadth-First-Search"><a href="#Breadth-First-Search" class="headerlink" title="Breadth-First Search"></a>Breadth-First Search</h2><p><strong>BFS</strong></p><p>Explore all nodes at one level before moving on to the next.<br>Use <strong>queue</strong> to keep track of the nodes.<br>Good for finding the shortest path in unweighted graphs.</p><h2 id="Depth-First-Search"><a href="#Depth-First-Search" class="headerlink" title="Depth-First Search"></a>Depth-First Search</h2><p><strong>DFS</strong></p><p>Explore all nodes at one path and head back to another path.<br>Use <strong>stack</strong> to keep track of the nodes.<br>Useful for tasks like topological sorting, cycle detection, or exploring all paths.</p><p>They are 2 fundamental ways for traversing or searching data structures such as trees or graphs Let’s look at this GIF.<br><img src="/Machine-Learning-Search/Search.gif" alt="GIF"></p><p>The practice of both of these algorithms share the same concept, however <strong>BFS is applied into the frontier by Queue</strong> and <strong>DFS is applied into the frontier by Stack</strong>. Let me explain this additionally by applying the left-hand side graph with DFS. First, look at the left-hand side of the GIF. Imagine there is a stack frontier and a node. The node first point at 1. Stack push 1 -&gt; pop 1 and push 3 2. The node now points to 2. Stack pop 2 and push 5 and 4. The node points to 4. Stack pop 4 and the node now points 5. Stack pop 5 -&gt; push 7 -&gt; pop 7. The node now points to 3. Stack pop 3 -&gt; push 6 -&gt; pop 6 -&gt; push 8 -&gt; pop 8. Follow the sequence we pop, 1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 7 -&gt; 3 -&gt; 6 -&gt; 8 this is sequence is same as the one on the right functions. You may figure the right-hand side one out by applying it with a queue frontier by yourself.</p><h1 id="Informed-Search"><a href="#Informed-Search" class="headerlink" title="Informed Search"></a>Informed Search</h1><p>Search strategy that uses problem-specific knowledge to find solutions more efficiently</p><h2 id="Greedy-Best-First-Search"><a href="#Greedy-Best-First-Search" class="headerlink" title="Greedy Best-First Search"></a>Greedy Best-First Search</h2><p>Search algorithm that expands the node that is closest to the goal, as estimated by a <strong>heuristic function</strong></p><p><strong>Heuristic Function</strong>: It is a strategy used in algorithms to estimate the cost or distance to reach the goal, which can significantly improve problem-solving efficiency. It provides searching algorithms with estimates of the most promising paths to a solution.</p><p><img src="/Machine-Learning-Search/gbfs.png" alt="IMAGE"></p><p>With greedy best-first search, it will choose the path which cost the least to reach the goal, the right side with 11 blocks away.</p><h2 id="A-Search-A-star-Search"><a href="#A-Search-A-star-Search" class="headerlink" title="A* Search (A star Search)"></a>A* Search (A star Search)</h2><p>Search algorithm that expands node with the lowest value of g(n)+h(n), where g(n) &#x3D; cost to reach node and h(n) &#x3D; estimated cost to goal which is heuristic function.</p><p><img src="/Machine-Learning-Search/as.png" alt="IMAGE"></p><p>With A* Search, it get to choose the path with the least value of g(n)+h(n) which one is 15+6 and the other is 6+13. It then move on to the block with 13 and encounter another path switching situation with 7+14 and 15+6, it chooses the current path and so on until hit the goal.</p><h3 id="Optimal-Cases"><a href="#Optimal-Cases" class="headerlink" title="Optimal Cases"></a>Optimal Cases</h3><p>h(n) is admissible (never overestimates the true cost), and h(n) is consistent (for each node n and successor n’ with cost c, h(n) ≤ h(n’)+c ).<br>Simply speaking, if I am at a current state, the next states heuristic value plus the cost for me to make that step should not increases. The better the heuristic function is, the better you will be able to solve the problem in the fewer states that you will have to explore.</p><h1 id="Adversarial-Search"><a href="#Adversarial-Search" class="headerlink" title="Adversarial Search"></a>Adversarial Search</h1><p>Search strategy to solve a problem while there are opponents trying to stop it from succeeding or compete for opposite goals. It is often used in games like tic-tac-toe.</p><h2 id="Minimax"><a href="#Minimax" class="headerlink" title="Minimax"></a>Minimax</h2><p>It is a recursive algorithm which represents the winning condition with +1 for one side and -1 for the other side. Further actions are driven by these conditions with the minimizing side trying to get the lowest score and the maximizing side trying to get the highest. </p><p>Representing a tic-tac-toe AI</p><ul><li>S₀: Initial state (in our case, an empty 3X3 board)</li><li>Players(s): a function that, given a state s, returns which player’s turn it is (X or O).</li><li>Actions(s): a function that, given a state s, return all the legal moves in this state (what spots are free on the board).</li><li>Result(s, a): a function that, given a state s and action a, returns a new state. This is the board that resulted from performing the action a on state s, a <strong>Transition Model</strong>.</li><li>Terminal(s): a function that, given a state s, checks whether this is the last step in the game, i.e. if someone won or there is a tie. Returns True if the game has ended, False otherwise.</li><li>Utility(s): a function that, given a terminal state s, returns the utility value of the state: -1, 0, or 1.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-comment">//Pseudo Code</span><br><span class="hljs-keyword">function</span> <span class="hljs-title class_">Max</span>-<span class="hljs-title class_">Value</span>(<span class="hljs-title class_">State</span>):<br>  <span class="hljs-keyword">if</span> <span class="hljs-title class_">Terminal</span>(<span class="hljs-title class_">State</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Utility</span>(<span class="hljs-title class_">State</span>)<br>  v = -∞<br>  <span class="hljs-keyword">for</span> action <span class="hljs-keyword">in</span> <span class="hljs-title class_">Actions</span>(<span class="hljs-title class_">State</span>):<br>    v = <span class="hljs-title function_">MAX</span>(v, <span class="hljs-title class_">Min</span>-<span class="hljs-title class_">Value</span>(<span class="hljs-title class_">Result</span>(<span class="hljs-title class_">State</span>, <span class="hljs-title class_">Action</span>)))<br>  <span class="hljs-keyword">return</span> v<br><br><span class="hljs-keyword">function</span> <span class="hljs-title class_">Min</span>-<span class="hljs-title class_">Value</span>(<span class="hljs-title class_">State</span>):<br>  <span class="hljs-keyword">if</span> <span class="hljs-title class_">Terminal</span>(<span class="hljs-title class_">State</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Utility</span>(<span class="hljs-title class_">State</span>)<br>  v = ∞<br>  <span class="hljs-keyword">for</span> action <span class="hljs-keyword">in</span> <span class="hljs-title class_">Actions</span>(<span class="hljs-title class_">State</span>):<br>    v = <span class="hljs-title function_">MIN</span>(v, <span class="hljs-title class_">Max</span>-<span class="hljs-title class_">Value</span>(<span class="hljs-title class_">Result</span>(<span class="hljs-title class_">State</span>, <span class="hljs-title class_">Action</span>)))<br>  <span class="hljs-keyword">return</span> v<br></code></pre></td></tr></table></figure><p><img src="/Machine-Learning-Search/mmx.png" alt="IMAGE"></p><p>The algorithm recursively simulates all possible games that can take place, starting from the current state until it reaches terminal state. Each terminal state is valued as either +1, 0, -1.</p><h2 id="Optimizations-For-Minimax"><a href="#Optimizations-For-Minimax" class="headerlink" title="Optimizations For Minimax"></a>Optimizations For Minimax</h2><h3 id="Alpha-Beta-Pruning"><a href="#Alpha-Beta-Pruning" class="headerlink" title="Alpha-Beta Pruning"></a>Alpha-Beta Pruning</h3><p>This is a way to optimize minimax algorithms; it prunes the branches of the search tree that is not important. </p><p>The first graph describes how normal minimax works: the green triangles are the maximizing side and the red ones are the minimizing side. Imagine this as a game with 3 choices every turn before the game ends; you will see that each choice can lead to a different state. It is already assumed that the opponent will make the move that benefits themselves the most(the smartest move). For the green triangle, it will choose the option that could lead to the maximum score among the possible choices decided by its opponent, and vice versa for the red triangle. Now that you understand how the first image works, let’s go on to the second.</p><p>Here is the minimax algorithm optimized by Alpha-Beta Pruning. It basically functions the same as normal minimax, but it stops searching after finding a lower score than the one already found, because the remaining options are no longer important—there is already a better option than choosing the one with the lower score. In the image, after 3 is found, the only possible scores will be equal to or less than 3. Since we know the first red triangle’s score is 4, it doesn’t matter if the next one is any score less than 4, so the rest are not important. Even if the rest could lead to an instant win, the red triangle wouldn’t choose it because the opponents is assumed to always make the smartest move.</p><p><img src="/Machine-Learning-Search/mmxg.png" alt="IMAGE"><br><img src="/Machine-Learning-Search/abp.png" alt="IMAGE"></p><h3 id="Depth-Limited-Minimax"><a href="#Depth-Limited-Minimax" class="headerlink" title="Depth-Limited Minimax"></a>Depth-Limited Minimax</h3><p>For the tasks that have an extremely large number of possibilities, like chess (288,000,000,000 after 4 moves each, $ 10^{29000}$ total possible positions), it is a very time-, space-consuming task to solve with minimax. But, what if we have a way to limit the depth of the search instead of searching all possibilities every turn? Besides the aforementioned, Depth-Limited Minimax also needs an evaluation function, because without fully searching the possibilities, we cannot assign a score to a move. So it requires another way to evaluate a score.</p><p><strong>Evaluation Function</strong>: It evaluates the score of each move in some other way. For instance, an evaluation function for a chess game might be based on what pieces each player has, or their location on the board. It returns a positive or negative number that represents how favorable the board is for one player versus the other. The better the evaluation function is, the better the minimax algorithm that relies on it will perform.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://www.youtube.com/watch?v=5NgNicANyqM">Harvard CS50’s Artificial Intelligence with Python – Full University Course</a></li><li><a href="https://cs50.harvard.edu/ai/notes/0/">CS50 Lecture Notes: Search</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Search </tag>
            
            <tag> Harvard CS50 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discrete-Math-Chapter-1-Logic-And-Proof</title>
      <link href="/Discrete-Math-Chapter-1-Logic-And-Proof/"/>
      <url>/Discrete-Math-Chapter-1-Logic-And-Proof/</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-Propositonal-Logic"><a href="#1-1-Propositonal-Logic" class="headerlink" title="1.1 Propositonal Logic"></a>1.1 Propositonal Logic</h1><p><strong>Propositions</strong>: It is a declarative sentence that is either true or false, but not both.</p><ul><li>I am hungry.</li><li>2 + 6 &#x3D; 10</li></ul><div style="display: flex; gap: 90px;"><div><p><strong>Negation</strong>: $\neg$ </p><p>Perform as NOT</p><table><thead><tr><th>p</th><th>$\neg\hspace{1mm}p$</th></tr></thead><tbody><tr><td>T</td><td>F</td></tr><tr><td>F</td><td>T</td></tr></tbody></table></div><div><p><strong>Conjunction</strong>: $\wedge$ </p><p>Perform as AND</p><table><thead><tr><th>p</th><th>q</th><th>$p \wedge q$</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>F</td></tr><tr><td>F</td><td>T</td><td>F</td></tr><tr><td>F</td><td>F</td><td>F</td></tr></tbody></table></div></div><div style="display: flex; gap: 90px;"><div><p><strong>Disjunction</strong>: $\vee$ </p><p>Perform as OR</p><table><thead><tr><th>p</th><th>q</th><th>$p \vee q$</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>T</td></tr><tr><td>F</td><td>T</td><td>T</td></tr><tr><td>F</td><td>F</td><td>F</td></tr></tbody></table></div><div><p><strong>Exclusive Or</strong>: ⊕</p><p>Perform as Exclusive OR</p><table><thead><tr><th>p</th><th>q</th><th>p ⊕ q</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>F</td></tr><tr><td>T</td><td>F</td><td>T</td></tr><tr><td>F</td><td>T</td><td>T</td></tr><tr><td>F</td><td>F</td><td>F</td></tr></tbody></table></div></div>]]></content>
      
      
      <categories>
          
          <category> Discrete Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Discrete Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discrete-Math-Trick-Question</title>
      <link href="/Discrete-Math-Trick-Question/"/>
      <url>/Discrete-Math-Trick-Question/</url>
      
        <content type="html"><![CDATA[<h2 id="Tricky-Question-about-Proposition"><a href="#Tricky-Question-about-Proposition" class="headerlink" title="Tricky Question about Proposition"></a>Tricky Question about Proposition</h2><p>Here are some <strong>tricky questions about propositions in discrete mathematics</strong>, designed to test deeper understanding of their properties and logic:</p><ol><li><p><strong>Ambiguous Sentences:</strong></p><ul><li>Is the statement “This sentence is false” a proposition?</li><li><strong>Answer:</strong> No, it’s a paradox and cannot be labeled as true or false, so it is not a proposition.</li></ul></li><li><p><strong>Statements with Variables:</strong></p><ul><li>Is “x is greater than 2” a proposition?</li><li><strong>Answer:</strong> No, it is not a proposition until a specific value for x is provided.</li></ul></li><li><p><strong>Compound Propositions:</strong></p><ul><li>Let $ p $: “It is raining,” and $ q $: “I will carry an umbrella.”</li></ul><p> Which of the following are propositions, and what do they mean?<br>     -  $ p \rightarrow q $<br>     -  $ p \wedge \sim q $</p><ul><li><strong>Answer:</strong> Both are compound propositions. The first means “If it is raining, then I will carry an umbrella.” The second means “It is raining and I will not carry an umbrella”.</li></ul></li><li><p><strong>Double Negation:</strong></p><ul><li>Is the statement “It is not the case that it is not raining” logically equivalent to “It is raining”?</li><li><strong>Answer:</strong> Yes, double negation in logic returns to the original statement.</li></ul></li><li><p><strong>Truth Tables:</strong></p><ul><li>Construct the truth table for $ (p \rightarrow \sim q) \vee (q \rightarrow \sim r) $. Under what truth values for p, q, and r is this statement false?</li><li><strong>Answer:</strong> This requires step-by-step logical analysis and truth table construction.</li></ul></li><li><p><strong>Necessary and Sufficient Conditions:</strong></p><ul><li>If $ p $: “x is even”, $ q $: “x is divisible by 4”. Is $ q $ a sufficient condition for $ p $? Is $ p $ a necessary condition for $ q $?</li><li><strong>Answer:</strong> Yes to both: If x is divisible by 4, it must be even (sufficient). To be divisible by 4, x must be even (necessary).</li></ul></li><li><p><strong>Negation Trap:</strong></p><ul><li>What is the negation of “If it is cold, then I wear a coat”?</li><li><strong>Answer:</strong> “It is cold and I do not wear a coat.” (Not “If it is not cold, I do not wear a coat”).</li></ul></li><li><p><strong>“Or” Ambiguity:</strong></p><ul><li>In logic, does “You can have cake or ice cream” mean “one or the other, but not both”?</li><li><strong>Answer:</strong> In propositional logic, “or” (inclusive) means one or both. Exclusive “or” (xor) means strictly one, not both.</li></ul></li></ol><p>These questions help highlight subtle points in <strong>propositional logic</strong>—such as the treatment of paradoxes, variable dependency, truth tables, logical equivalence, and the pitfalls in negation and the meaning of logical connectives.</p>]]></content>
      
      
      <categories>
          
          <category> Discrete Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Discrete Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Full-Stack-Website-Project-Notes-1</title>
      <link href="/Full-Stack-Website-Project-Notes-1/"/>
      <url>/Full-Stack-Website-Project-Notes-1/</url>
      
        <content type="html"><![CDATA[<p>I found this <a href="https://www.youtube.com/watch?v=Cxftp90K_ek">tutorial</a> on YouTube and decided to build it. Although this is not day 1, I’ve already reached the third section of this tutorial. However, I had been following the steps without really understanding what I was actually doing, so I decided to write some notes starting from the beginning section. This will allow me to actually learn something meaningful from the process.</p><p>This project is about building an online course app, which is a full-stack website from frontend to backend.</p><p>For further information about this project, feel free to check out <a href="https://github.com/tonytonybalony/Full-Stack-Website">HERE!</a> </p><h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h1><h2 id="Achievements"><a href="#Achievements" class="headerlink" title="Achievements"></a>Achievements</h2><ul><li>Installed SQL, Server Express, and SQL Server Management Studio</li><li>Learned the basics of SQL</li><li>Walked through the database design for the application</li><li>Understood how to structure databases</li></ul><h2 id="Database-Fundamentals"><a href="#Database-Fundamentals" class="headerlink" title="Database Fundamentals"></a>Database Fundamentals</h2><p><strong>#SQL</strong> is a programming language that generates tables to store data. Tables are basically rows and columns.</p><p><strong>#SQL Server</strong> is an app that runs as a Windows service in the background which actually stores and manages data.</p><p><strong>#SQL Server Management Studio</strong> or SSMS is a standalone application with a graphical interface which connects to SQL Server to manage databases.</p><h2 id="Setup-Steps"><a href="#Setup-Steps" class="headerlink" title="Setup Steps"></a>Setup Steps</h2><ol><li>Open SSMS and connect to the database with SQLEXPRESS. </li><li>Create a new database under Databases and name it “OnlineCourseDB”.</li><li>Open the provided SQL file and execute it.</li><li>Tables and initial data are created.</li></ol><h2 id="SQL-Basics"><a href="#SQL-Basics" class="headerlink" title="SQL Basics"></a>SQL Basics</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- Create and Use Database</span><br><span class="hljs-keyword">CREATE</span> DATABASE OnlineCourseDB<br>USE OnlineCourseDB<br><br><span class="hljs-comment">-- Create Tables</span><br><span class="hljs-keyword">CREATE TABLE</span> UserProfile (<br>    UserId <span class="hljs-type">INT</span> <span class="hljs-keyword">IDENTITY</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<br>    DisplayName NVARCHAR(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">CONSTRAINT</span> DF_UserProfile_DisplayName <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;Guest&#x27;</span>,<br>    FirstName NVARCHAR(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT NULL</span>,<br>    LastName NVARCHAR(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT NULL</span>,<br>    Email NVARCHAR(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT NULL</span>,<br>    AdObjId NVARCHAR(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT NULL</span>,<br>    <span class="hljs-keyword">CONSTRAINT</span> PK_UserProfile_UserId <span class="hljs-keyword">PRIMARY KEY</span> (UserId)<br>);<br><br><span class="hljs-comment">-- SQL Script Commands ARE NOT Case-Sensitive, but String Values ARE.</span><br><span class="hljs-keyword">create table</span> Instructor(<br>    InstructorId <span class="hljs-type">INT</span> <span class="hljs-keyword">IDENTITY</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<br>    FirstName NVARCHAR(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT NULL</span>,<br>    LastName NVARCHAR(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT NULL</span>,<br>    Email NVARCHAR(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT NULL</span>,<br>    Bio NVARCHAR(MAX),<br>  UserId <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT NULL</span>,  <br>    <span class="hljs-keyword">CONSTRAINT</span> PK_Instructor_InstructorId <span class="hljs-keyword">PRIMARY KEY</span> (InstructorId),<br>  <span class="hljs-keyword">CONSTRAINT</span> FK_Instructor_UserProfile <span class="hljs-keyword">FOREIGN KEY</span> (UserId) <span class="hljs-keyword">REFERENCES</span> UserProfile(UserId)<br>);<br><br><span class="hljs-comment">-- Data Operations (CRUD)</span><br><span class="hljs-comment">-- Create</span><br><span class="hljs-keyword">INSERT INTO</span> UserProfile (DisplayName, FirstName, LastName, Email, AdObjId)<br><span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-string">&#x27;John Doe&#x27;</span>, <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Doe&#x27;</span>, <span class="hljs-string">&#x27;john.doe@example.com&#x27;</span>, <span class="hljs-string">&#x27;ad-obj-id-001&#x27;</span>),<br>(<span class="hljs-string">&#x27;Jane Smith&#x27;</span>, <span class="hljs-string">&#x27;Jane&#x27;</span>, <span class="hljs-string">&#x27;Smith&#x27;</span>, <span class="hljs-string">&#x27;jane.smith@example.com&#x27;</span>, <span class="hljs-string">&#x27;ad-obj-id-002&#x27;</span>),<br>(<span class="hljs-string">&#x27;Alice Johnson&#x27;</span>, <span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;Johnson&#x27;</span>, <span class="hljs-string">&#x27;alice.johnson@example.com&#x27;</span>, <span class="hljs-string">&#x27;ad-obj-id-003&#x27;</span>),<br>(<span class="hljs-string">&#x27;Chicken Jockey&#x27;</span>, <span class="hljs-string">&#x27;Chicken&#x27;</span>, <span class="hljs-string">&#x27;Jockey&#x27;</span>, <span class="hljs-string">&#x27;chicken.jockey@example.com&#x27;</span>, <span class="hljs-string">&#x27;ad-obj-id-004&#x27;</span>);<br><span class="hljs-comment">-- Read</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> UserProfile;<br><span class="hljs-comment">-- Update</span><br><span class="hljs-keyword">UPDATE</span> UserProfile <span class="hljs-keyword">SET</span> DisplayName <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Guest&#x27;</span> <span class="hljs-keyword">WHERE</span> FirstName <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Jane&#x27;</span>;<br><span class="hljs-comment">-- Delete</span><br><span class="hljs-keyword">DELETE</span> UserProfile <span class="hljs-keyword">WHERE</span> FirstName <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Chicken&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>Output:</p><table><thead><tr><th>DisplayName</th><th>FirstName</th><th>LastName</th><th>Email</th><th>AdObjId</th></tr></thead><tbody><tr><td>John Doe</td><td>John</td><td>Doe</td><td><a href="mailto:&#x6a;&#111;&#104;&#110;&#46;&#x64;&#111;&#x65;&#x40;&#101;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#46;&#99;&#111;&#x6d;">john.doe@example.com</a></td><td>ad-obj-id-001</td></tr><tr><td>Guest</td><td>Jane</td><td>Smith</td><td><a href="mailto:&#106;&#x61;&#110;&#x65;&#x2e;&#x73;&#109;&#x69;&#x74;&#104;&#x40;&#101;&#120;&#x61;&#x6d;&#x70;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;">jane.smith@example.com</a></td><td>ad-obj-id-002</td></tr><tr><td>Alice Johnson</td><td>Alice</td><td>Johnson</td><td><a href="mailto:&#97;&#x6c;&#x69;&#x63;&#101;&#46;&#x6a;&#x6f;&#x68;&#x6e;&#115;&#111;&#110;&#64;&#101;&#120;&#97;&#109;&#112;&#108;&#101;&#46;&#99;&#x6f;&#109;">alice.johnson@example.com</a></td><td>ad-obj-id-003</td></tr></tbody></table><p>This is a basic full SQL program.</p><p>In <code>CREATE TABLE</code>, each line defines a column in the table. By definition, each column has to contain a <strong>Name</strong> and a <strong>Data Type</strong>. Another statement you might see in a table is <strong>Constraint</strong>.</p><p>Constraints are useful tools in SQL. They can build relationships with other tables, set restrictions to stored values, set default values or generate sequential numbers, etc…</p><p><u>There are many kinds of data types and constraints in SQL, I will just talk about the data types you see here. </u></p><ul><li><p><strong>INT</strong> is obviously integer, <strong>IDENTITY(1,1)</strong> means start at 1 and increment by 1. </p></li><li><p><strong>NVARCHAR</strong> is a UNICODE character variable(it contains many languages unlike ASCII), the parentheses is the restricted length of NVARCHAR. For instance, FirstName cannot store more than 50 characters, Bio with NVARCHAR <strong>(MAX)</strong> allows maximum possible length which is up to 2GB of text.</p></li><li><p><strong>NOT NULL</strong> simply means this column has to contain something, it cannot be NULL.</p></li><li><p><strong>CONSTRAINT</strong> is used to name the behavior of the line of code for clarity, to make it easier to debug.</p></li><li><p><strong>DEFAULT</strong> sets a variable to a certain value if value is not given.</p></li><li><p><strong>PRIMARY KEY</strong> is a unique key identifies each row in a table, it cannot be NULL and there can only be one primary key per table.</p></li><li><p><strong>FOREIGN KEY</strong> is an essential key allows tables to link together by referencing another table’s primary key using <strong>REFERENCES</strong>.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Full-Stack-Website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Website </tag>
            
            <tag> Project </tag>
            
            <tag> SQL </tag>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spotify-API-Application</title>
      <link href="/Spotify-API-Application/"/>
      <url>/Spotify-API-Application/</url>
      
        <content type="html"><![CDATA[<h1 id="Building-a-Spotify-API-Application"><a href="#Building-a-Spotify-API-Application" class="headerlink" title="Building a Spotify API Application"></a>Building a Spotify API Application</h1><p>This tutorial demonstrates how to use the Spotify Web API to create playlists programmatically using JavaScript.</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>The Spotify Web API allows developers to access Spotify’s music catalog and user data. In this example, we’ll create a playlist with predefined tracks and embed it in our blog.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><ul><li>Spotify Developer Account</li><li>Access token with appropriate scopes (<code>playlist-modify-private</code>, <code>user-read-private</code>)</li></ul><h2 id="Code-Implementation"><a href="#Code-Implementation" class="headerlink" title="Code Implementation"></a>Code Implementation</h2><p>The complete JavaScript implementation is available here: <a href="main.js">main.js</a></p><h3 id="Key-Features"><a href="#Key-Features" class="headerlink" title="Key Features:"></a>Key Features:</h3><ol><li><strong>Authentication</strong>: Uses Bearer token for API access</li><li><strong>Playlist Creation</strong>: Creates a private playlist for the user</li><li><strong>Track Addition</strong>: Adds predefined tracks to the playlist</li><li><strong>Error Handling</strong>: Basic error management for API calls</li></ol><h3 id="Code-Structure"><a href="#Code-Structure" class="headerlink" title="Code Structure:"></a>Code Structure:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Fetch wrapper for Spotify API calls</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchWebApi</span>(<span class="hljs-params">endpoint, method, body</span>) &#123;<br>  <span class="hljs-comment">// API call implementation</span><br>&#125;<br><br><span class="hljs-comment">// Create playlist and add tracks</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createPlaylist</span>(<span class="hljs-params">tracksUri</span>) &#123;<br>  <span class="hljs-comment">// Playlist creation logic</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><p>Here’s the playlist created by our application:</p><iframe  title="Spotify Embed: Recommendation Playlist"  src="https://open.spotify.com/embed/playlist/2Gl1WAFM4u3VmnMQl55fif?utm_source=generator&theme=0"  width="100%"  height="360"  frameborder="0"  allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"  loading="lazy"></iframe><h2 id="Security-Note"><a href="#Security-Note" class="headerlink" title="Security Note"></a>Security Note</h2><p>⚠️ <strong>Important</strong>: Never expose your actual access tokens in production code. Use environment variables or secure token management systems.</p><h2 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><ul><li>Implement OAuth flow for user authentication</li><li>Add error handling and user feedback</li><li>Create dynamic playlists based on user preferences</li><li>Explore other Spotify API endpoints</li></ul><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul><li><a href="https://developer.spotify.com/documentation/web-api/">Spotify Web API Documentation</a></li><li><a href="https://developer.spotify.com/dashboard/applications">Spotify App Settings</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spotify </tag>
            
            <tag> API </tag>
            
            <tag> Javascript </tag>
            
            <tag> Web-Development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown Cheatsheet</title>
      <link href="/Markdown_Cheatsheet/"/>
      <url>/Markdown_Cheatsheet/</url>
      
        <content type="html"><![CDATA[<h2 id="Headings"><a href="#Headings" class="headerlink" title="Headings"></a>Headings</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-section"># h1</span><br><span class="hljs-section">## h2</span><br><span class="hljs-section">### h3</span><br><span class="hljs-section">#### h4</span><br><span class="hljs-section">##### h5</span><br>// After inspecting tonytonybalony<span class="hljs-emphasis">_blog\blog-demo\.deploy_</span>git\css\style.css<br>// I find out h3 to h6 has the same size (h3 is underscored, h4 == h5 == h6).<br></code></pre></td></tr></table></figure><h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><h2 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-emphasis">*italic*</span><br><span class="hljs-emphasis">_italic_</span><br><span class="hljs-strong">**bold**</span><br><span class="hljs-strong">__bold__</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*bold italic*</span>**</span><br>~~strikethrough~~<br></code></pre></td></tr></table></figure><p><em>italic</em><br><em>italic</em><br><strong>bold</strong><br><strong>bold</strong><br><em><strong>bold italic</strong></em><br><del>strikethrough</del></p><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">[<span class="hljs-string">My Website</span>](<span class="hljs-link">https://tonytonybalony.github.io</span>)<br>[<span class="hljs-string">My Website with title</span>](<span class="hljs-link">https://tonytonybalony.github.io &quot;Tony&#x27;s Website&quot;</span>)<br></code></pre></td></tr></table></figure><p><a href="https://tonytonybalony.github.io/">My Website</a><br><a href="https://tonytonybalony.github.io/" title="Tony&#39;s Website">My Website with title</a></p><h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">[<span class="hljs-string">Image</span>](<span class="hljs-link">IMG_1178.JPG</span>)<br>[<span class="hljs-string">Image with title</span>](<span class="hljs-link">IMG_1178.JPG &quot;12345&quot;</span>)<br><br>// Before doing this, I will have to drag the jpg file into the folder of this post.<br>// That&#x27;s why I set &quot;post<span class="hljs-emphasis">_asset_</span>folder&quot; to true in &quot;<span class="hljs-emphasis">_config.yml&quot;, so it can automatically create a folder with the same file name of the post under &quot;source/post&quot;.</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">![<span class="hljs-string">Image</span>](<span class="hljs-link">IMG_1178.JPG</span>)</span><br></code></pre></td></tr></table></figure><p><a href="IMG_1178.JPG">Image</a><br><a href="IMG_1178.JPG" title="12345">Image with title</a></p><p><img src="/Markdown_Cheatsheet/IMG_1178.JPG" alt="Image"></p><h2 id="Quotes"><a href="#Quotes" class="headerlink" title="Quotes"></a>Quotes</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-quote">&gt; This is a quote.</span><br>&gt;&gt; Nested quote.<br></code></pre></td></tr></table></figure><blockquote><p>This is a quote.</p><blockquote><p>Nested quote.</p></blockquote></blockquote><h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-bullet">-</span> Item<br><span class="hljs-bullet">-</span> Item<br><span class="hljs-bullet">    -</span> Subitem<br><span class="hljs-bullet">*</span> Item<br><br><span class="hljs-bullet">1.</span> Item<br><span class="hljs-bullet">2.</span> Item<br><span class="hljs-bullet">3.</span> Item<br><span class="hljs-bullet">    1.</span> Subitem<br><span class="hljs-bullet">    2.</span> Subitem<br></code></pre></td></tr></table></figure><ul><li>Item</li><li>Item<ul><li>Subitem</li></ul></li></ul><ul><li>Item</li></ul><ol><li>Item</li><li>Item</li><li>Item<ol><li>Subitem</li><li>Subitem</li></ol></li></ol><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-code">`mkdir /D/myfolder`</span><br></code></pre></td></tr></table></figure><p><code>mkdir /D/myfolder</code></p><pre>&#96;&#96;&#96;#include<stdio.h>int main(){    printf("Hello World!");    return 0;}&#96;&#96;&#96;</pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#include&lt;stdio.h&gt;<br>int main()&#123;<br>    printf(&quot;Hello World!&quot;);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;pre&gt;<br>&amp;#96;&amp;#96;&amp;#96;<br>#include&lt;stdio.h&gt;<br>int main()&#123;<br>    printf(&quot;Hello World!&quot;);<br>    return 0;<br>&#125;<br>&amp;#96;&amp;#96;&amp;#96;<br>&lt;/pre&gt;<br></code></pre></td></tr></table></figure><p>This is how I display triple backticks in the example.</p><h2 id="Tablets"><a href="#Tablets" class="headerlink" title="Tablets"></a>Tablets</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">|   Mon   |   Tue   |   Wen   |<br>|---------|---------|---------|<br>|  Math   | ProDev  |   DS    |<br>| English | DigiDes |  Alg    |<br></code></pre></td></tr></table></figure><table><thead><tr><th>Mon</th><th>Tue</th><th>Wen</th></tr></thead><tbody><tr><td>Math</td><td>ProDev</td><td>DS</td></tr><tr><td>English</td><td>DigiDes</td><td>Alg</td></tr></tbody></table><h2 id="Horizontal-Rule"><a href="#Horizontal-Rule" class="headerlink" title="Horizontal Rule"></a>Horizontal Rule</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">---<br>or<br><span class="hljs-strong">***</span><br><span class="hljs-strong">or</span><br><span class="hljs-strong">__<span class="hljs-emphasis">_</span></span><br></code></pre></td></tr></table></figure><hr><h2 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-bullet">-</span> [x] Done<br><span class="hljs-bullet">-</span> [ ] Todo<br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> Done</li><li><input disabled="" type="checkbox"> Todo</li></ul><h2 id="Raw-HTML"><a href="#Raw-HTML" class="headerlink" title="Raw HTML"></a>Raw HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note&quot;</span>&gt;</span>This is a custom HTML block!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div class="note">This is a custom HTML block!</div>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Programming </tag>
            
            <tag> Website Building </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Change_Icons</title>
      <link href="/Change-Icons/"/>
      <url>/Change-Icons/</url>
      
        <content type="html"><![CDATA[<p>I am going to teach you how to change a shortcut icon on Windows 11.</p><h2 id="Use-Icon-Editor-to-Build-Icon-Library"><a href="#Use-Icon-Editor-to-Build-Icon-Library" class="headerlink" title="Use Icon Editor to Build Icon Library"></a>Use Icon Editor to Build Icon Library</h2><ol><li>First of all, you will need to download <a href="https://greenfishsoftware.org/">Greenfish Icon Editor Pro</a>. This editor is totally free and open-source!</li><li>By the time downloading, you may head to browser and search for “ico download”. Download the <code>.ico</code> files you want.</li><li>Follow the setup instructions, install and lauch the icon editor.<ol><li>At the startup screen, click on New library.</li><li>Click on <strong>Add resources</strong> and choose the <code>.ico</code> you just downloaded.</li><li>Click <strong>Save as</strong>, type the file name and save your file at somewhere permanent.</li><li>A window will pop up asking you to select ICL format. Choose <strong>PE (32-bit Windows executable)</strong>. <em>Note: NE format is outdated and not recommended.</em></li></ol></li></ol><h2 id="Change-Icons"><a href="#Change-Icons" class="headerlink" title="Change Icons"></a>Change Icons</h2><ol><li>Go to the shortcut for which you want to change the icon.</li><li>Right click the shortcut and select <strong>Properties</strong> -&gt; <strong>Change Icon</strong> -&gt; <strong>Browse</strong>.</li><li>Select your <code>.icl</code> file at the location you just stored.</li><li>Select the icon by double clicking it in the icon bar and Click <strong>Apply</strong> -&gt; <strong>OK</strong>.</li></ol><blockquote><p><em>🎉 Congrats! You’re all done. Enjoy your new icon!</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First_Blog_Post</title>
      <link href="/First-Blog-Post/"/>
      <url>/First-Blog-Post/</url>
      
        <content type="html"><![CDATA[<p>Hey everyone! Welcome to my first blog post. I’ll be sharing what I learn and the projects I work on — both as a way to document my journey and (hopefully) help others understand some concepts along the way.</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Calculus_Cheatsheet</title>
      <link href="/Calculus-Cheatsheet/"/>
      <url>/Calculus-Cheatsheet/</url>
      
        <content type="html"><![CDATA[<p><img src="/Calculus-Cheatsheet/IMG_1643.JPG" alt="IMG_1643.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1644.JPG" alt="IMG_1644.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1645.JPG" alt="IMG_1645.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1646.JPG" alt="IMG_1646.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1647.JPG" alt="IMG_1647.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1648.JPG" alt="IMG_1648.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1649.JPG" alt="IMG_1649.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1650.JPG" alt="IMG_1650.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1651.JPG" alt="IMG_1651.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1652.JPG" alt="IMG_1652.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1653.JPG" alt="IMG_1653.JPG"></p><blockquote><p>I originally decided to type everything in using LaTeX, but I am too lazy.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Calculus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Calculus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linked_List</title>
      <link href="/Linked-List/"/>
      <url>/Linked-List/</url>
      
        <content type="html"><![CDATA[<p>Data elements are represented by nodes, which are connected using links or pointers.</p><p><img src="/Linked-List/084ff751-e89f-46df-b4d7-7c8a147d34f6.png" alt="2.jpg"></p><ul><li><p>Each element points to only the next element.</p></li><li><p>Each element contains data and a pointer to the next node.</p></li><li><p>Only the head is stored externally from the linked list.</p></li><li><p>Memory is dynamically allocated.</p></li><li><p>Unlike arrays, random access is not possible; traversal must start from the head node, step by step.</p></li><li><p>It doesn’t waste memory space because nodes are created one by one as needed, allowing the list to grow and shrink dynamically at runtime.</p></li></ul><p><img src="/Linked-List/store.jpg" alt="store"></p><h2 id="Basic-Operations"><a href="#Basic-Operations" class="headerlink" title="Basic Operations"></a>Basic Operations</h2><ul><li>Insert - insert between two elements or insert at the head or end</li><li>Delete - delete an element</li><li>Search - search an element using given key</li><li>Display - display the complete list<blockquote><p>It’s very important to understand how pointers behave during insertion and deletion — you’ll need to figure that out on your own!</p></blockquote></li></ul><p><img src="/Linked-List/0d5577e9-6812-40ba-aeba-e64b54ea7bf5.png" alt="4.jpg"></p><h2 id="Types-of-Linked-List"><a href="#Types-of-Linked-List" class="headerlink" title="Types of Linked List"></a>Types of Linked List</h2><ol><li>Singly Linked List</li><li><a href="d.png">Doubly Linked List</a></li><li><a href="c.png">Circular Linked List</a></li><li><a href="cd.png">Doubly Circular Linked List</a></li><li><a href="h.png">Header Linked List</a></li></ol><h2 id="Advanced-Operations"><a href="#Advanced-Operations" class="headerlink" title="Advanced Operations"></a>Advanced Operations</h2><ul><li>Concatenate<ul><li>Linked List<br><img src="/Linked-List/ll.png" alt="Linked List"></li><li>Circular Linked List<br><img src="/Linked-List/lc.png" alt="Circular Linked List"></li></ul></li><li>Invert<ul><li>Linked List<br><img src="/Linked-List/sv.png" alt="Linked List"></li><li>Circular Linked List<br><img src="/Linked-List/cv.png" alt="Circular Linked List"></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br><span class="hljs-type">int</span> data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>*<span class="hljs-title">next</span>;</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> <span class="hljs-title">a</span>;</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> Node&#123;<br><span class="hljs-type">int</span> data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>*<span class="hljs-title">next</span>;</span><br>&#125;Mynode;<br>Mynode a;<br></code></pre></td></tr></table></figure><p><img src="/Linked-List/22.jpg" alt="22.jpg"></p><p>❌Last node not detected in this example.</p><p>Fixed:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>*<span class="hljs-title">next</span>;</span><br>&#125;Node;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">search</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> x)</span> &#123;<br>    Node*current= &amp;node;<br>    <span class="hljs-keyword">while</span> (current!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span> (current-&gt;data==x) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        current=current-&gt;next;<br>    &#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="All-in-One-Linked-List-Code-by-Gemini"><a href="#All-in-One-Linked-List-Code-by-Gemini" class="headerlink" title="All in One Linked List Code (by Gemini)"></a>All in One Linked List Code (by Gemini)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @file linked_list_complete.c</span><br><span class="hljs-comment"> * @brief A comprehensive, all-in-one example of a singly linked list in C.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This file contains the data structure definition and all essential operations:</span><br><span class="hljs-comment"> * - Creation of a node</span><br><span class="hljs-comment"> * - Insertion (at beginning, at end, after a specific node)</span><br><span class="hljs-comment"> * - Deletion (by key)</span><br><span class="hljs-comment"> * - Searching (by key)</span><br><span class="hljs-comment"> * - Printing the list</span><br><span class="hljs-comment"> * - Freeing the entire list to prevent memory leaks</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * The main() function provides a step-by-step demonstration of these operations.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// A node in a singly linked list</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">next</span>;</span><br>&#125; Node;<br><br><span class="hljs-comment">// --- Function Prototypes ---</span><br>Node* <span class="hljs-title function_">createNode</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">printList</span><span class="hljs-params">(Node* head)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">insertAtBeginning</span><span class="hljs-params">(Node** head_ref, <span class="hljs-type">int</span> new_data)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">insertAtEnd</span><span class="hljs-params">(Node** head_ref, <span class="hljs-type">int</span> new_data)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">insertAfter</span><span class="hljs-params">(Node* prev_node, <span class="hljs-type">int</span> new_data)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(Node** head_ref, <span class="hljs-type">int</span> key)</span>;<br>Node* <span class="hljs-title function_">search</span><span class="hljs-params">(Node* head, <span class="hljs-type">int</span> key)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">freeList</span><span class="hljs-params">(Node** head_ref)</span>;<br><br><br><span class="hljs-comment">// --- Main Driver Program ---</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Start with an empty list</span><br>    Node* head = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Initial list:\n&quot;</span>);<br>    printList(head);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\\\\\\\n&quot;</span>);<br><br>    <span class="hljs-comment">// --- Insertion Operations ---</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Inserting 10 at the end.\n&quot;</span>);<br>    insertAtEnd(&amp;head, <span class="hljs-number">10</span>);<br>    printList(head);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Inserting 20 at the end.\n&quot;</span>);<br>    insertAtEnd(&amp;head, <span class="hljs-number">20</span>);<br>    printList(head);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Inserting 5 at the beginning.\n&quot;</span>);<br>    insertAtBeginning(&amp;head, <span class="hljs-number">5</span>);<br>    printList(head); <span class="hljs-comment">// List should be: 5 -&gt; 10 -&gt; 20 -&gt; NULL</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Inserting 15 after node with value 10.\n&quot;</span>);<br>    Node* node_10 = search(head, <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span> (node_10 != <span class="hljs-literal">NULL</span>) &#123;<br>        insertAfter(node_10, <span class="hljs-number">15</span>);<br>    &#125;<br>    printList(head); <span class="hljs-comment">// List should be: 5 -&gt; 10 -&gt; 15 -&gt; 20 -&gt; NULL</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\\\\\\\n&quot;</span>);<br><br>    <span class="hljs-comment">// --- Search Operation ---</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Searching for node with value 15...\n&quot;</span>);<br>    Node* found_node = search(head, <span class="hljs-number">15</span>);<br>    <span class="hljs-keyword">if</span> (found_node != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Found node with value: %d\n&quot;</span>, found_node-&gt;data);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Node not found.\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Searching for node with value 99...\n&quot;</span>);<br>    found_node = search(head, <span class="hljs-number">99</span>);<br>    <span class="hljs-keyword">if</span> (found_node != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Found node with value: %d\n&quot;</span>, found_node-&gt;data);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Node with value 99 not found.\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\\\\\\\n&quot;</span>);<br><br><br>    <span class="hljs-comment">// --- Deletion Operations ---</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Current list before deletions:\n&quot;</span>);<br>    printList(head);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Deleting node with value 10 (middle node).\n&quot;</span>);<br>    deleteNode(&amp;head, <span class="hljs-number">10</span>);<br>    printList(head); <span class="hljs-comment">// List should be: 5 -&gt; 15 -&gt; 20 -&gt; NULL</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Deleting node with value 5 (head node).\n&quot;</span>);<br>    deleteNode(&amp;head, <span class="hljs-number">5</span>);<br>    printList(head); <span class="hljs-comment">// List should be: 15 -&gt; 20 -&gt; NULL</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Deleting node with value 20 (tail node).\n&quot;</span>);<br>    deleteNode(&amp;head, <span class="hljs-number">20</span>);<br>    printList(head); <span class="hljs-comment">// List should be: 15 -&gt; NULL</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Trying to delete a non-existent node (value 100).\n&quot;</span>);<br>    deleteNode(&amp;head, <span class="hljs-number">100</span>);<br>    printList(head); <span class="hljs-comment">// List should be unchanged: 15 -&gt; NULL</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\\\\\\\n&quot;</span>);<br><br>    <span class="hljs-comment">// --- Memory Management ---</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Freeing the entire list...\n&quot;</span>);<br>    freeList(&amp;head);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;List after freeing:\n&quot;</span>);<br>    printList(head); <span class="hljs-comment">// Should print &quot;NULL&quot;</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">// --- Function Implementations ---</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief Creates a new node with the given data and allocates memory for it.</span><br><span class="hljs-comment"> * @param data The integer value for the new node.</span><br><span class="hljs-comment"> * @return A pointer to the newly created node. Returns NULL on allocation failure.</span><br><span class="hljs-comment"> */</span><br>Node* <span class="hljs-title function_">createNode</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span> &#123;<br>    Node* newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    <span class="hljs-keyword">if</span> (newNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Memory allocation failed!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// Exit if malloc fails</span><br>    &#125;<br>    newNode-&gt;data = data;<br>    newNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> newNode;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief Prints the contents of the linked list from head to tail.</span><br><span class="hljs-comment"> * @param head The head node of the list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printList</span><span class="hljs-params">(Node* head)</span> &#123;<br>    Node* current = head;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, current-&gt;data);<br>        current = current-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief Inserts a new node at the beginning of the list.</span><br><span class="hljs-comment"> * @param head_ref A pointer to the head pointer of the list.</span><br><span class="hljs-comment"> * @param new_data The data for the new node.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insertAtBeginning</span><span class="hljs-params">(Node** head_ref, <span class="hljs-type">int</span> new_data)</span> &#123;<br>    Node* newNode = createNode(new_data);<br>    newNode-&gt;next = *head_ref; <span class="hljs-comment">// New node points to the old head</span><br>    *head_ref = newNode;       <span class="hljs-comment">// Head pointer now points to the new node</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief Inserts a new node at the end of the list.</span><br><span class="hljs-comment"> * @param head_ref A pointer to the head pointer of the list.</span><br><span class="hljs-comment"> * @param new_data The data for the new node.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insertAtEnd</span><span class="hljs-params">(Node** head_ref, <span class="hljs-type">int</span> new_data)</span> &#123;<br>    Node* newNode = createNode(new_data);<br>    <br>    <span class="hljs-comment">// If the list is empty, the new node becomes the head</span><br>    <span class="hljs-keyword">if</span> (*head_ref == <span class="hljs-literal">NULL</span>) &#123;<br>        *head_ref = newNode;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Otherwise, traverse to the last node</span><br>    Node* last = *head_ref;<br>    <span class="hljs-keyword">while</span> (last-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        last = last-&gt;next;<br>    &#125;<br><br>    <span class="hljs-comment">// Change the next of the last node</span><br>    last-&gt;next = newNode;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief Inserts a new node after a given node.</span><br><span class="hljs-comment"> * @param prev_node The node after which to insert the new node. Cannot be NULL.</span><br><span class="hljs-comment"> * @param new_data The data for the new node.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insertAfter</span><span class="hljs-params">(Node* prev_node, <span class="hljs-type">int</span> new_data)</span> &#123;<br>    <span class="hljs-keyword">if</span> (prev_node == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Previous node cannot be NULL.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Node* newNode = createNode(new_data);<br>    newNode-&gt;next = prev_node-&gt;next;<br>    prev_node-&gt;next = newNode;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief Deletes the first occurrence of a node with the given key.</span><br><span class="hljs-comment"> * @param head_ref A pointer to the head pointer of the list.</span><br><span class="hljs-comment"> * @param key The data value of the node to be deleted.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(Node** head_ref, <span class="hljs-type">int</span> key)</span> &#123;<br>    Node* temp = *head_ref;<br>    Node* prev = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// Case 1: The head node itself holds the key</span><br>    <span class="hljs-keyword">if</span> (temp != <span class="hljs-literal">NULL</span> &amp;&amp; temp-&gt;data == key) &#123;<br>        *head_ref = temp-&gt;next; <span class="hljs-comment">// Change head</span><br>        <span class="hljs-built_in">free</span>(temp);             <span class="hljs-comment">// Free old head</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Case 2: Search for the key, keeping track of the previous node</span><br>    <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">NULL</span> &amp;&amp; temp-&gt;data != key) &#123;<br>        prev = temp;<br>        temp = temp-&gt;next;<br>    &#125;<br><br>    <span class="hljs-comment">// Case 3: If the key was not present in the list</span><br>    <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">// Key not found, do nothing</span><br>    &#125;<br><br>    <span class="hljs-comment">// Unlink the node from the list</span><br>    prev-&gt;next = temp-&gt;next;<br>    <span class="hljs-built_in">free</span>(temp); <span class="hljs-comment">// Free memory</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief Searches for a node with the given key.</span><br><span class="hljs-comment"> * @param head The head node of the list.</span><br><span class="hljs-comment"> * @param key The value to search for.</span><br><span class="hljs-comment"> * @return A pointer to the first node with the key, or NULL if not found.</span><br><span class="hljs-comment"> */</span><br>Node* <span class="hljs-title function_">search</span><span class="hljs-params">(Node* head, <span class="hljs-type">int</span> key)</span> &#123;<br>    Node* current = head;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (current-&gt;data == key) &#123;<br>            <span class="hljs-keyword">return</span> current;<br>        &#125;<br>        current = current-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// Key not found</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief Frees all nodes in the list to prevent memory leaks.</span><br><span class="hljs-comment"> * @param head_ref A pointer to the head pointer of the list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">freeList</span><span class="hljs-params">(Node** head_ref)</span> &#123;<br>    Node* current = *head_ref;<br>    Node* nextNode;<br><br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        nextNode = current-&gt;next; <span class="hljs-comment">// Store the next node</span><br>        <span class="hljs-built_in">free</span>(current);            <span class="hljs-comment">// Free the current node</span><br>        current = nextNode;       <span class="hljs-comment">// Move to the next node</span><br>    &#125;<br><br>    <span class="hljs-comment">// Set the original head pointer to NULL to indicate the list is empty</span><br>    *head_ref = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Outputs:<br>Initial list:<br>NULL<br>\\\<br>Inserting 10 at the end.<br>10 -&gt; NULL<br>Inserting 20 at the end.<br>10 -&gt; 20 -&gt; NULL<br>Inserting 5 at the beginning.<br>5 -&gt; 10 -&gt; 20 -&gt; NULL<br>Inserting 15 after node with value 10.<br>5 -&gt; 10 -&gt; 15 -&gt; 20 -&gt; NULL<br>\\\<br>Searching for node with value 15…<br>Found node with value: 15<br>Searching for node with value 99…<br>Node with value 99 not found.<br>\\\<br>Current list before deletions:<br>5 -&gt; 10 -&gt; 15 -&gt; 20 -&gt; NULL<br>Deleting node with value 10 (middle node).<br>5 -&gt; 15 -&gt; 20 -&gt; NULL<br>Deleting node with value 5 (head node).<br>15 -&gt; 20 -&gt; NULL<br>Deleting node with value 20 (tail node).<br>15 -&gt; NULL<br>Trying to delete a non-existent node (value 100).<br>15 -&gt; NULL<br>\\\<br>Freeing the entire list…<br>List after freeing:<br>NULL</p><p>Process finished with exit code 0</p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Notion </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Structure</title>
      <link href="/Structure/"/>
      <url>/Structure/</url>
      
        <content type="html"><![CDATA[<h1 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h1><p>link different data form together (int, float, char…)</p><p>it is a user-defined composite data type</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Date</span> &#123;</span><br>    <span class="hljs-type">int</span> day;<br>    <span class="hljs-type">int</span> month;<br>    <span class="hljs-type">int</span> year;<br>&#125;; <span class="hljs-comment">// Don&#x27;t forget the semicolon!</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br>    <span class="hljs-type">int</span> studentID;<br>    <span class="hljs-type">float</span> gpa;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Date</span> <span class="hljs-title">dob</span>;</span> <span class="hljs-comment">// Structs can contain other structs (nesting)</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p><strong>Using Initializer Lists (at declaration):</strong> Similar to arrays. Values must be in the order members are defined.</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Date</span> <span class="hljs-title">today</span> =</span> &#123; <span class="hljs-number">25</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2023</span> &#125;; <span class="hljs-comment">// today.day=25, today.month=10, ...</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">student1</span> =</span> &#123; <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">12345</span>, <span class="hljs-number">3.8</span>, &#123;<span class="hljs-number">15</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2002</span>&#125; &#125;; <span class="hljs-comment">// Nested init</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Using Designated Initializers (C99+):</strong> More readable, less error-prone if the struct definition changes. Order doesn’t matter.</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span> <span class="hljs-title">p1</span> =</span> &#123; .x = <span class="hljs-number">10</span>, .y = <span class="hljs-number">20</span> &#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">student2</span> =</span> &#123; .studentID = <span class="hljs-number">54321</span>, .name = <span class="hljs-string">&quot;Bob&quot;</span>, .gpa = <span class="hljs-number">3.5</span> &#125;;<br><span class="hljs-comment">// dob is uninitialized (or zeroed if static/global)</span><br></code></pre></td></tr></table></figure></li></ul><hr><p><strong>Structs and Pointers (Very Important!)</strong></p><ul><li><p><strong>Declaring Pointers to Structs:</strong> struct <struct_tag_name> *<pointer_name>;</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> *<span class="hljs-title">studentPtr</span>;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Assigning Address:</strong> Use the &amp; operator.</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">studentPtr = &amp;student1; <span class="hljs-comment">// studentPtr now points to student1</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Accessing Members via Pointers - The Arrow Operator (-&gt;):</strong> This is the standard, preferred way.</p><ul><li><p><strong>Syntax:</strong> <pointer_name>-&gt;<member_name></p></li><li><p><strong>Purpose:</strong> It dereferences the pointer <em>and</em> accesses the member in one step. It’s shorthand for (*pointer_name).member_name.</p></li><li><p><strong>Example:</strong></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Student ID via pointer: %d\n&quot;</span>, studentPtr-&gt;studentID);<br>studentPtr-&gt;gpa = <span class="hljs-number">3.9</span>; <span class="hljs-comment">// Modify GPA via pointer</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Student DOB Day via pointer: %d\n&quot;</span>, studentPtr-&gt;dob.day); <br><span class="hljs-comment">// Mix -&gt; and .</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>Accessing via Pointers - Dereference and Dot ((*).):</strong> Less common, more verbose, but shows the underlying mechanism.</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Student ID via (*).: %d\n&quot;</span>, (*studentPtr).studentID);<br></code></pre></td></tr></table></figure></li><li><p><strong>Dynamic Allocation:</strong> Structs are frequently used with malloc to create data on the heap (e.g., linked lists, trees). Remember free!</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">studentPtr = (<span class="hljs-keyword">struct</span> Student *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Student));<br><span class="hljs-keyword">if</span> (studentPtr != <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-comment">// strcpy(studentPtr-&gt;name, &quot;Charlie&quot;); // Use strcpy for strings!</span><br>    studentPtr-&gt;studentID = <span class="hljs-number">98765</span>;<br>    <span class="hljs-comment">// ... initialize other members ...</span><br>    <span class="hljs-built_in">free</span>(studentPtr); <span class="hljs-comment">// Don&#x27;t forget to free!</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>There are a few <strong>more ways</strong> to define and use <code>struct</code> in C, and it’s super useful to know the different styles. Here’s a rundown of the <strong>main syntaxes</strong> you’ll see:</p><hr><p><strong>Structs and Functions</strong></p><ul><li><p><strong>Passing by Value:</strong> A <em>copy</em> of the entire struct is passed. Changes inside the function don’t affect the original. Can be inefficient for large structs.</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">printStudentByValue</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Student s)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ID: %d\n&quot;</span>, s.studentID);<br>    s.studentID = <span class="hljs-number">0</span>; <span class="hljs-comment">// Changes only the local copy &#x27;s&#x27;</span><br>&#125;<br><span class="hljs-comment">// Call: printStudentByValue(student1);</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Passing by Pointer (Address):</strong> Pass the address (&amp;) of the struct. More efficient (only an address is copied). Allows the function to modify the original struct using the arrow (-&gt;) operator. This is the <em>most common</em> way.</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">promoteStudentByPointer</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Student *sp)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Promoting student ID: %d\n&quot;</span>, sp-&gt;studentID);<br>    sp-&gt;gpa += <span class="hljs-number">0.1</span>; <span class="hljs-comment">// Modifies the original student&#x27;s GPA</span><br>&#125;<br><span class="hljs-comment">// Call: promoteStudentByPointer(&amp;student1);</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Returning Structs:</strong> Functions can return struct variables (usually by value, so a copy is returned).</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> Point <span class="hljs-title function_">createPoint</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span> <span class="hljs-title">p</span> =</span> &#123; .x = x, .y = y &#125;;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-comment">// Call: struct Point myPoint = createPoint(5, -2);</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="🔹-1-Classic-struct-no-typedef"><a href="#🔹-1-Classic-struct-no-typedef" class="headerlink" title="🔹 1. Classic struct, no typedef"></a>🔹 1. <strong>Classic struct, no typedef</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> <span class="hljs-title">a</span>;</span>          <span class="hljs-comment">// must use &#x27;struct&#x27; every time</span><br></code></pre></td></tr></table></figure><p>✔️ Simple and clear, but a bit wordy.</p><h3 id="🔹-2-Typedef-with-struct-tag"><a href="#🔹-2-Typedef-with-struct-tag" class="headerlink" title="🔹 2. Typedef with struct tag"></a>🔹 2. <strong>Typedef with struct tag</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; Node;<br>Node a;                 <br><span class="hljs-comment">// now we can skip &#x27;struct&#x27;</span><br></code></pre></td></tr></table></figure><p>✔️ Very common in real-world code. Clean and flexible.</p><h3 id="🔹-3-Typedef-without-struct-tag"><a href="#🔹-3-Typedef-without-struct-tag" class="headerlink" title="🔹 3. Typedef without struct tag"></a>🔹 3. <strong>Typedef without struct tag</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; Node;<br></code></pre></td></tr></table></figure><ul><li>Now you can <strong>only use <code>Node</code></strong>, there’s <strong>no <code>struct node</code></strong> type name.</li><li>Can’t refer to <code>struct node</code> anymore—just <code>Node</code>.</li></ul><p>✔️ Cleanest if you don’t need to reference the tag (<code>struct node</code>) anywhere else.</p><h3 id="🔹-4-Anonymous-struct-with-variable"><a href="#🔹-4-Anonymous-struct-with-variable" class="headerlink" title="🔹 4. Anonymous struct with variable"></a>🔹 4. <strong>Anonymous struct with variable</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-type">int</span> id;<br>&#125; a, b;<br></code></pre></td></tr></table></figure><ul><li>No type name, no <code>typedef</code>.</li><li>Just defines variables <code>a</code> and <code>b</code> directly.</li></ul><p>🚫 Not reusable for other variables unless redefined.</p><h3 id="🔹-5-Define-and-declare-at-once"><a href="#🔹-5-Define-and-declare-at-once" class="headerlink" title="🔹 5. Define and declare at once"></a>🔹 5. <strong>Define and declare at once</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node1, node2;<br></code></pre></td></tr></table></figure><p>✔️ Defines struct and declares variables in one shot.</p><h3 id="🔹-6-Forward-declaration-for-self-referencing"><a href="#🔹-6-Forward-declaration-for-self-referencing" class="headerlink" title="🔹 6. Forward declaration (for self-referencing)"></a>🔹 6. <strong>Forward declaration (for self-referencing)</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>;</span>  <span class="hljs-comment">// forward declaration</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span>  <span class="hljs-comment">// now this is valid</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>✔️ Used when you need to refer to the same struct type <strong>inside itself</strong> (like for linked lists or trees).</p><h3 id="🔚-Summary-Table"><a href="#🔚-Summary-Table" class="headerlink" title="🔚 Summary Table:"></a>🔚 Summary Table:</h3><table><thead><tr><th>Style</th><th>Reusable Type</th><th>Cleaner Syntax</th><th>Self-Reference</th></tr></thead><tbody><tr><td><code>struct node &#123;&#125;</code></td><td>✅ Yes</td><td>❌ No</td><td>✅ Yes</td></tr><tr><td><code>typedef struct node &#123;&#125; Node;</code></td><td>✅ Yes</td><td>✅ Yes</td><td>✅ Yes</td></tr><tr><td><code>typedef struct &#123;&#125;</code></td><td>✅ Yes</td><td>✅ Yes</td><td>❌ No name to refer to</td></tr><tr><td><code>struct &#123;&#125;</code> with variables</td><td>❌ No</td><td>✅ Quick</td><td>❌ No</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Notion </tag>
            
            <tag> Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pointer</title>
      <link href="/Pointer/"/>
      <url>/Pointer/</url>
      
        <content type="html"><![CDATA[<p><strong>Normal Variables (Value Variables):</strong></p><ul><li>Store their data value directly in the memory location allocated to the variable</li><li>When you access the variable, you directly access its value</li></ul><p><strong>Pointer Variables:</strong></p><ul><li>Store memory addresses as their values</li><li>Provide indirect access to data by storing the location (address) where the actual data is stored</li><li>Can be dereferenced to access or modify the value at the stored address</li></ul><p><strong>Reference</strong>:</p><ul><li>In the context of pointers, a “reference” is essentially the memory address that points to where data is stored</li><li>When we say a pointer “references” something, it means the pointer contains the memory address of that data</li><li>For example, if we have a pointer <code>p</code> that points to variable <code>x</code>, we say “p references x” or “p holds a reference to x”</li></ul><p><strong>Dereferencing</strong>:</p><ul><li>“Dereferencing” is the act of accessing or modifying the value stored at the memory address contained in a pointer</li><li>It means “follow this address to get to the actual data”</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* ptr;      <span class="hljs-comment">// Pointer to integer</span><br><span class="hljs-type">char</span>* str;     <span class="hljs-comment">// Pointer to character</span><br><span class="hljs-type">float</span>* fPtr;   <span class="hljs-comment">// Pointer to float</span><br><span class="hljs-type">int</span> *ptr;      <span class="hljs-comment">// Some programmers prefer this style</span><br><span class="hljs-type">char</span> *str;     <span class="hljs-comment">// The asterisk is placed next to the variable name</span><br><br>**<span class="hljs-type">int</span>* p1, * p2;  <span class="hljs-comment">// Both are pointers to integers</span><br><span class="hljs-type">int</span> *p1, *p2;   <span class="hljs-comment">// Alternative style</span><br><br><span class="hljs-type">int</span>** pPtr;    <span class="hljs-comment">// Pointer to a pointer to an integer</span><br><span class="hljs-type">char</span>*** pppChar; <span class="hljs-comment">// Triple pointer (pointer to pointer to pointer to char)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>* ptr;      <span class="hljs-comment">// Pointer to a constant integer (value can&#x27;t be changed)</span><br><span class="hljs-type">int</span>* <span class="hljs-type">const</span> ptr = &amp;x; <span class="hljs-comment">// Constant pointer (can&#x27;t point to another address)</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>* <span class="hljs-type">const</span> ptr = &amp;x; <span class="hljs-comment">// Constant pointer to constant integer</span><br><br><span class="hljs-type">void</span>* ptr;     <span class="hljs-comment">// Generic pointer that can point to any data type</span><br><span class="hljs-type">int</span> (*funcPtr)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>);  <span class="hljs-comment">// Pointer to function that takes two ints and returns int**</span><br></code></pre></td></tr></table></figure><blockquote><p>I know these notes are pretty dense and were mostly written for my own benefit. I’d be impressed if anyone besides me makes it to the end.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Notion </tag>
            
            <tag> Pointer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Time_Complexity</title>
      <link href="/Time-Complexity/"/>
      <url>/Time-Complexity/</url>
      
        <content type="html"><![CDATA[<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><ul><li><strong>Input</strong> – Takes zero or more inputs.</li><li><strong>Output</strong> – Produces at least one output.</li><li><strong>Definiteness</strong> – Each step is clearly and unambiguously defined.</li><li><strong>Finiteness</strong> – The algorithm must end after a finite number of steps.</li><li><strong>Effectiveness</strong> – Each step can be carried out exactly and in a finite amount of time.</li></ul><h2 id="Pseudocode"><a href="#Pseudocode" class="headerlink" title="Pseudocode"></a>Pseudocode</h2><p><img src="/Time-Complexity/03c158fd-1e4d-4483-a28d-9d4586d21611.png" alt="4.jpg"></p><h2 id="Flow-Chart"><a href="#Flow-Chart" class="headerlink" title="Flow Chart"></a>Flow Chart</h2><p><img src="/Time-Complexity/bb35518d-70b5-4dcd-860d-f9aef2526028.png" alt="5.jpg"></p><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h2><p>The cost of time while executing an algorithm.</p><p>evaluate by the number of executions</p><p>comments, bracket, and funciton &amp; variable declaration don’t count</p><p>initialization of variable while declaring count </p><p>function call count</p><p>indicate as T(n)</p><p>BIG-O : Worst-Case analysis</p><p>f(n ) ≤ c ⋅ g(n)</p><pre><code>Θ     : Average-Case analysis</code></pre><p>c1 ⋅ g(n) ≤ f(n) ≤ c2 ⋅ g(n)</p><pre><code>Ω     : Best-Case analysis</code></pre><p>f(n) ≥ c ⋅ g(n)</p><p><img src="/Time-Complexity/33.jpg" alt="33.jpg"></p><h2 id="Space-Complexity"><a href="#Space-Complexity" class="headerlink" title="Space Complexity"></a>Space Complexity</h2><p>S(P) &#x3D; C + SP(I)</p><p>C : Fixed Space Requirement (Constant)</p><p>SP(I) : Variable Space Requirement (Variable)</p><p><img src="/Time-Complexity/38.jpg" alt="38.jpg"></p><p><img src="/Time-Complexity/113663e3-eb67-4c57-891d-7aae44067da7.png" alt="39.jpg"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">addition</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span>&#123;<br><span class="hljs-keyword">return</span> (a+b+b*c*(a+b+c)/(a+b)+<span class="hljs-number">4</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>There is no structure variable and recusive call, so SP(I) &#x3D; 0.</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">addition</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> d)</span>&#123;<br><span class="hljs-type">int</span> average;<br>average = (a+b+c+d)/<span class="hljs-number">4</span>;<br><span class="hljs-keyword">return</span> average;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>addition function has 4 references and a return value, declaration of int takes 4 bytes. Therefore, fixed space requires CS (4+1) * 4 bytes &#x3D; 20 bytes</strong></p><p><strong>addition function does not contain dynamic allocate memory. SP &#x3D; 0 byte</strong></p><p><strong>S(P) &#x3D; CS + SP(I) &#x3D; 20 + 0 &#x3D; 20 bytes</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">float</span> <span class="hljs-built_in">list</span>[], <span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-type">float</span> tempsum = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span> ; i&lt;n ; i++)&#123;<br>tempsum += <span class="hljs-built_in">list</span> [i];<br>&#125;<br><span class="hljs-keyword">return</span> tempsum;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>SP(I):</strong></p><p><strong>no stack space cost (no recursive call)</strong></p><p><strong>possess structure variable (analyze if it is called by value):</strong></p><p><strong>4*n - if list[ ] is called by value (determine by main function’s  array length)</strong></p><p><strong>0 or C - if list[ ] is called by address (main function only pass head address)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span> <span class="hljs-title function_">rsum</span><span class="hljs-params">(<span class="hljs-type">float</span> <span class="hljs-built_in">list</span>[], <span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-keyword">if</span> (n!=<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> rsum(<span class="hljs-built_in">list</span>, n<span class="hljs-number">-1</span>) + <span class="hljs-built_in">list</span>[n<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>We assumed int takes 4 bytes, float takes 4 bytes, address takes 2 bytes and list[ ] is called by address .</strong></p><p><strong>SP (I) : possess structure variable, but it is not called by value.</strong> </p><p><strong>there is stack space cost (recursive call)</strong></p><p><strong>stack spaces for each recursive call:</strong></p><p><strong>SP(I)&#x3D;list head address + n + return address &#x3D; 2 + 4 + 2&#x3D;8</strong></p><p><strong>n times recursive calls SP(I) &#x3D; 8n bytes</strong></p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Notion </tag>
            
            <tag> Time_Complexity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array</title>
      <link href="/Array/"/>
      <url>/Array/</url>
      
        <content type="html"><![CDATA[<p>In C it is a fixed-size, ordered, and homogeneous sert.</p><p>Search of an array starts with 0.</p><p>If an array is declared without initialization, the elements will contain garbage values whatever that found in the memory.</p><p>Anything may happen if you try to access to index out of range.</p><p>Arrays store values contiguously in the memory.</p><ul><li>Traversal - This operation is used to print the elements of the array.</li><li>Insertion - It is used to add an element at a particular index.</li><li>Deletion - It is used to delete an element from a particular index.</li><li>Search - It is used to search an element using the given index or by the value.</li><li>Update - It updates an element at a particular index.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><br><br>    <span class="hljs-type">int</span> n = <span class="hljs-number">10</span>, k;<br><br>    <span class="hljs-comment">// Variable Length Array (VLA):</span><br>    <span class="hljs-comment">// Allowed in C99 and later, but not in C++ or C89.</span><br>    <span class="hljs-comment">// The value of n must be initialized before this line.</span><br>    <span class="hljs-type">int</span> a[n]; <span class="hljs-comment">// OK: n is initialized to 10</span><br><br>    <span class="hljs-comment">// Undefined behavior: k is uninitialized, so b[k] is invalid!</span><br>    <span class="hljs-comment">// This may cause a crash or unpredictable results.</span><br>    <span class="hljs-type">int</span> b[k];<br><br>    <span class="hljs-comment">// Array initialization using an initializer list without specifying size:</span><br>    <span class="hljs-comment">// The size is automatically set to the number of elements.</span><br>    <span class="hljs-type">int</span> c[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;; <span class="hljs-comment">// size = 5</span><br><br>    <span class="hljs-comment">// Fixed-size arrays</span><br>    <span class="hljs-type">double</span> d[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">char</span> e[<span class="hljs-number">20</span>];<br><br>    <span class="hljs-comment">// Zero-length arrays:</span><br>    <span class="hljs-comment">// Allowed as a compiler extension in some C99/C11 compilers, but not standard in C17.</span><br>    <span class="hljs-type">int</span> f[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-comment">// All elements initialized to 0</span><br>    <span class="hljs-type">int</span> g[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-comment">// Array assignment</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        a[i]=i*<span class="hljs-number">3</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Size of an array</span><br>    <span class="hljs-type">int</span> size = <span class="hljs-keyword">sizeof</span>(a)/<span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Size: %d\n&quot;</span>,size);<br><br>    <span class="hljs-comment">// Array operations</span><br><br>        <span class="hljs-comment">// Traversal</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Traveral operation: &quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  &quot;</span>,a[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>        <span class="hljs-comment">// Insertion</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the value and position you want to insert:&quot;</span>);<br>    <span class="hljs-type">int</span> val, pos;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;val, &amp;pos);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=size; i&gt;=pos; i--)&#123;<br>        a[i]=a[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">if</span> (i==pos)<br>            a[i]=val;<br>    &#125;<br><br>        <span class="hljs-comment">// Traversal</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Traveral operation: &quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  &quot;</span>,a[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <br>        <span class="hljs-comment">// Deletion</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the position you want to delete:&quot;</span>);<br>    <span class="hljs-type">int</span> dpos;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;dpos);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=dpos; i&lt;size<span class="hljs-number">-1</span>; i++)&#123;<br>        a[i]=a[i+<span class="hljs-number">1</span>];<br>    &#125;<br>    a[size<span class="hljs-number">-1</span>]=<span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// Traversal</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Traveral operation: &quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  &quot;</span>,a[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><br><br>    <span class="hljs-comment">// This is an initialization of a 2D array</span><br>    <span class="hljs-type">int</span> h[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>    <span class="hljs-comment">// initializer list</span><br>    <span class="hljs-type">int</span> i[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123; &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>&#125; &#125;;<br><br>    <span class="hljs-comment">// Traversal for a 2D array</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Traversal for a 2D array: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  &quot;</span>,h[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-type">int</span> *ptr1;<br>    <span class="hljs-type">int</span> *ptr2 = h[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> *ptr3;<br>    <br>    <span class="hljs-comment">// Point to start of row 2 (demonstrates array-to-pointer decay)</span><br>    ptr1 = h[<span class="hljs-number">1</span>];  <span class="hljs-comment">// Same as &amp;a[2][0]</span><br>    ptr3 = &amp;h[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>];<br>    <br>    <span class="hljs-comment">// Traverse beyond row boundary using pointer arithmetic</span><br>    <span class="hljs-comment">// From a[2][0] + 13 positions = a[3][3]</span><br>    ptr1 += <span class="hljs-number">3</span>;<br>    ptr2 += <span class="hljs-number">4</span>;<br>    <br>    <span class="hljs-comment">// Access element through pointer dereference</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Value at h[2][0]: %d\n&quot;</span>, *ptr1);  <span class="hljs-comment">// Expected: 7</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Value at h[2][1]: %d\n&quot;</span>, *ptr2);  <span class="hljs-comment">// Expected: 8</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Value at h[0][2]: %d\n&quot;</span>, *ptr3);  <span class="hljs-comment">// Expected: 3</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Cons of Arrays in C</p><p>No push&#x2F;pop&#x2F;insert&#x2F;delete — you do everything manually.</p><hr><p>You can’t store mixed data types like in Python lists.</p><hr><p>Accessing <code>arr[9999]</code> won’t throw an error — it’ll just break stuff silently (undefined behavior).</p><p>When NOT to Use Arrays</p><p>When Frequent insert&#x2F;delelte is required.</p><p>Alternative : Use <strong>linked list</strong>, <strong>dynamic array</strong>, or <strong>queue</strong></p><hr><p>You don’t know the number of elements in advance.</p><p>Alternative : Use <strong><code>malloc</code> + realloc</strong>, or <strong>linked structures</strong></p><hr><p>You want to store mixed types.</p><p>Alternative : Use <strong><code>struct</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Data Structure </tag>
            
            <tag> Notion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Recursion</title>
      <link href="/Recursion-Data-Structure/"/>
      <url>/Recursion-Data-Structure/</url>
      
        <content type="html"><![CDATA[<p><strong>Non-recursive methods</strong> (while, repeat until…) are often more efficient.<br><strong>Recursion</strong> involves additional overhead and can consume more memory due to the call stack (e.g., push and pop operations).</p><p>Recursion Examples:<br>Factorial, Fibonacci Number, G.C.D., Binomial Coefficient, Ackermann’s Funciton, Tower of Hanoi, Permutation</p><p><strong>Base Case</strong>: The condition that ends the recursion.<br><strong>General Case</strong>: The function that makes the next recursive call.</p><p>Tower of Hanoi:</p><p><img src="/Recursion-Data-Structure/xnb8bdgl.png" alt="Image"><br>You can figure the following code out easily by considering case: n&#x3D;3.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">hanoi</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">char</span> source_peg, <span class="hljs-type">char</span> helping_peg,<span class="hljs-type">char</span> destination_peg)</span> &#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Move disk %d from %c to %c\n&quot;</span>, n, source_peg, destination_peg);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        hanoi(n<span class="hljs-number">-1</span>, source_peg, destination_peg, helping_peg);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Move disk %d from %c to %c\n&quot;</span>, n, source_peg, destination_peg);<br>        hanoi(n<span class="hljs-number">-1</span>, helping_peg, source_peg, destination_peg);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    hanoi(n,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Notion </tag>
            
            <tag> Recursion </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
