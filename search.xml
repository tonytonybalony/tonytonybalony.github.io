<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Markdown Cheatsheet</title>
      <link href="/Markdown_Cheatsheet/"/>
      <url>/Markdown_Cheatsheet/</url>
      
        <content type="html"><![CDATA[<h2 id="Headings"><a href="#Headings" class="headerlink" title="Headings"></a>Headings</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># h1</span><br><span class="line">## h2</span><br><span class="line">### h3</span><br><span class="line">#### h4</span><br><span class="line">##### h5</span><br><span class="line">// After inspecting tonytonybalony_blog\blog-demo\.deploy_git\css\style.css</span><br><span class="line">// I find out h3 to h6 has the same size (h3 is underscored, h4 == h5 == h6).</span><br></pre></td></tr></table></figure><h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><h2 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*italic*</span><br><span class="line">_italic_</span><br><span class="line">**bold**</span><br><span class="line">__bold__</span><br><span class="line">***bold italic***</span><br><span class="line">~~strikethrough~~</span><br></pre></td></tr></table></figure><p><em>italic</em><br><em>italic</em><br><strong>bold</strong><br><strong>bold</strong><br><em><strong>bold italic</strong></em><br><del>strikethrough</del></p><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[My Website](https://tonytonybalony.github.io)</span><br><span class="line">[My Website with title](https://tonytonybalony.github.io &quot;Tony&#x27;s Website&quot;)</span><br></pre></td></tr></table></figure><p><a href="https://tonytonybalony.github.io/">My Website</a><br><a href="https://tonytonybalony.github.io/" title="Tony&#39;s Website">My Website with title</a></p><h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Image](IMG_1178.JPG)</span><br><span class="line">[Image with title](IMG_1178.JPG &quot;12345&quot;)</span><br><span class="line"></span><br><span class="line">// Before doing this, I will have to drag the jpg file into the folder of this post.</span><br><span class="line">// That&#x27;s why I set &quot;post_asset_folder&quot; to true in &quot;_config.yml&quot;, so it can automatically create a folder with the same file name of the post under &quot;source/post&quot;.</span><br><span class="line"></span><br><span class="line">![Image](IMG_1178.JPG)</span><br></pre></td></tr></table></figure><p><a href="IMG_1178.JPG">Image</a><br><a href="IMG_1178.JPG" title="12345">Image with title</a></p><p><img src="/Markdown_Cheatsheet/IMG_1178.JPG" alt="Image"></p><h2 id="Quotes"><a href="#Quotes" class="headerlink" title="Quotes"></a>Quotes</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is a quote.</span><br><span class="line">&gt;&gt; Nested quote.</span><br></pre></td></tr></table></figure><blockquote><p>This is a quote.</p><blockquote><p>Nested quote.</p></blockquote></blockquote><h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- Item</span><br><span class="line">- Item</span><br><span class="line">    - Subitem</span><br><span class="line">* Item</span><br><span class="line"></span><br><span class="line">1. Item</span><br><span class="line">2. Item</span><br><span class="line">3. Item</span><br><span class="line">    1. Subitem</span><br><span class="line">    2. Subitem</span><br></pre></td></tr></table></figure><ul><li>Item</li><li>Item<ul><li>Subitem</li></ul></li></ul><ul><li>Item</li></ul><ol><li>Item</li><li>Item</li><li>Item<ol><li>Subitem</li><li>Subitem</li></ol></li></ol><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`mkdir /D/myfolder`</span><br></pre></td></tr></table></figure><p><code>mkdir /D/myfolder</code></p><pre>&#96;&#96;&#96;#include<stdio.h>int main(){    printf("Hello World!");    return 0;}&#96;&#96;&#96;</pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    printf(&quot;Hello World!&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;</span><br><span class="line">&amp;#96;&amp;#96;&amp;#96;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    printf(&quot;Hello World!&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&amp;#96;&amp;#96;&amp;#96;</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>This is how I display triple backticks in the example.</p><h2 id="Tablets"><a href="#Tablets" class="headerlink" title="Tablets"></a>Tablets</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|   Mon   |   Tue   |   Wen   |</span><br><span class="line">|---------|---------|---------|</span><br><span class="line">|  Math   | ProDev  |   DS    |</span><br><span class="line">| English | DigiDes |  Alg    |</span><br></pre></td></tr></table></figure><table><thead><tr><th>Mon</th><th>Tue</th><th>Wen</th></tr></thead><tbody><tr><td>Math</td><td>ProDev</td><td>DS</td></tr><tr><td>English</td><td>DigiDes</td><td>Alg</td></tr></tbody></table><h2 id="Horizontal-Rule"><a href="#Horizontal-Rule" class="headerlink" title="Horizontal Rule"></a>Horizontal Rule</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">or</span><br><span class="line">***</span><br><span class="line">or</span><br><span class="line">___</span><br></pre></td></tr></table></figure><hr><h2 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [x] Done</span><br><span class="line">- [ ] Todo</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> Done</li><li><input disabled="" type="checkbox"> Todo</li></ul><h2 id="Raw-HTML"><a href="#Raw-HTML" class="headerlink" title="Raw HTML"></a>Raw HTML</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;note&quot;&gt;This is a custom HTML block!&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="note">This is a custom HTML block!</div>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Programming </tag>
            
            <tag> Website Building </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Change_Icons</title>
      <link href="/Change-Icons/"/>
      <url>/Change-Icons/</url>
      
        <content type="html"><![CDATA[<p>I am going to teach you how to change a shortcut icon on Windows 11.</p><h2 id="Use-Icon-Editor-to-Build-Icon-Library"><a href="#Use-Icon-Editor-to-Build-Icon-Library" class="headerlink" title="Use Icon Editor to Build Icon Library"></a>Use Icon Editor to Build Icon Library</h2><ol><li>First of all, you will need to download <a href="https://greenfishsoftware.org/">Greenfish Icon Editor Pro</a>. This editor is totally free and open-source!</li><li>By the time downloading, you may head to browser and search for “ico download”. Download the <code>.ico</code> files you want.</li><li>Follow the setup instructions, install and lauch the icon editor.<ol><li>At the startup screen, click on New library.</li><li>Click on <strong>Add resources</strong> and choose the <code>.ico</code> you just downloaded.</li><li>Click <strong>Save as</strong>, type the file name and save your file at somewhere permanent.</li><li>A window will pop up asking you to select ICL format. Choose <strong>PE (32-bit Windows executable)</strong>. <em>Note: NE format is outdated and not recommended.</em></li></ol></li></ol><h2 id="Change-Icons"><a href="#Change-Icons" class="headerlink" title="Change Icons"></a>Change Icons</h2><ol><li>Go to the shortcut for which you want to change the icon.</li><li>Right click the shortcut and select <strong>Properties</strong> -&gt; <strong>Change Icon</strong> -&gt; <strong>Browse</strong>.</li><li>Select your <code>.icl</code> file at the location you just stored.</li><li>Select the icon by double clicking it in the icon bar and Click <strong>Apply</strong> -&gt; <strong>OK</strong>.</li></ol><blockquote><p><em>🎉 Congrats! You’re all done. Enjoy your new icon!</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First_Blog_Post</title>
      <link href="/First-Blog-Post/"/>
      <url>/First-Blog-Post/</url>
      
        <content type="html"><![CDATA[<p>Hey everyone! Welcome to my first blog post. I’ll be sharing what I learn and the projects I work on — both as a way to document my journey and (hopefully) help others understand some concepts along the way.</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Calculus_Cheatsheet</title>
      <link href="/Calculus-Cheatsheet/"/>
      <url>/Calculus-Cheatsheet/</url>
      
        <content type="html"><![CDATA[<p><img src="/Calculus-Cheatsheet/IMG_1643.JPG" alt="IMG_1643.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1644.JPG" alt="IMG_1644.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1645.JPG" alt="IMG_1645.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1646.JPG" alt="IMG_1646.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1647.JPG" alt="IMG_1647.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1648.JPG" alt="IMG_1648.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1649.JPG" alt="IMG_1649.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1650.JPG" alt="IMG_1650.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1651.JPG" alt="IMG_1651.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1652.JPG" alt="IMG_1652.JPG"><br><img src="/Calculus-Cheatsheet/IMG_1653.JPG" alt="IMG_1653.JPG"></p><blockquote><p>I originally decided to type everything in using LaTeX, but I am too lazy.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Calculus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Calculus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linked_List</title>
      <link href="/Linked-List/"/>
      <url>/Linked-List/</url>
      
        <content type="html"><![CDATA[<p>Data elements are represented by nodes, which are connected using links or pointers.</p><p><img src="/Linked-List/084ff751-e89f-46df-b4d7-7c8a147d34f6.png" alt="2.jpg"></p><ul><li><p>Each element points to only the next element.</p></li><li><p>Each element contains data and a pointer to the next node.</p></li><li><p>Only the head is stored externally from the linked list.</p></li><li><p>Memory is dynamically allocated.</p></li><li><p>Unlike arrays, random access is not possible; traversal must start from the head node, step by step.</p></li><li><p>It doesn’t waste memory space because nodes are created one by one as needed, allowing the list to grow and shrink dynamically at runtime.</p></li></ul><p><img src="/Linked-List/store.jpg" alt="store"></p><h2 id="Basic-Operations"><a href="#Basic-Operations" class="headerlink" title="Basic Operations"></a>Basic Operations</h2><ul><li>Insert - insert between two elements or insert at the head or end</li><li>Delete - delete an element</li><li>Search - search an element using given key</li><li>Display - display the complete list<blockquote><p>It’s very important to understand how pointers behave during insertion and deletion — you’ll need to figure that out on your own!</p></blockquote></li></ul><p><img src="/Linked-List/0d5577e9-6812-40ba-aeba-e64b54ea7bf5.png" alt="4.jpg"></p><h2 id="Types-of-Linked-List"><a href="#Types-of-Linked-List" class="headerlink" title="Types of Linked List"></a>Types of Linked List</h2><ol><li>Singly Linked List</li><li><a href="d.png">Doubly Linked List</a></li><li><a href="c.png">Circular Linked List</a></li><li><a href="cd.png">Doubly Circular Linked List</a></li><li><a href="h.png">Header Linked List</a></li></ol><h2 id="Advanced-Operations"><a href="#Advanced-Operations" class="headerlink" title="Advanced Operations"></a>Advanced Operations</h2><ul><li>Concatenate<ul><li>Linked List<br><img src="/Linked-List/ll.png" alt="Linked List"></li><li>Circular Linked List<br><img src="/Linked-List/lc.png" alt="Circular Linked List"></li></ul></li><li>Invert<ul><li>Linked List<br><img src="/Linked-List/sv.png" alt="Linked List"></li><li>Circular Linked List<br><img src="/Linked-List/cv.png" alt="Circular Linked List"></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>*<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">a</span>;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> Node&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>*<span class="title">next</span>;</span></span><br><span class="line">&#125;Mynode;</span><br><span class="line">Mynode a;</span><br></pre></td></tr></table></figure><p><img src="/Linked-List/22.jpg" alt="22.jpg"></p><p>❌Last node not detected in this example.</p><p>Fixed:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>*<span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">search</span><span class="params">(Node node, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    Node*current= &amp;node;</span><br><span class="line">    <span class="keyword">while</span> (current!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;data==x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current=current-&gt;next;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="All-in-One-Linked-List-Code-by-Gemini"><a href="#All-in-One-Linked-List-Code-by-Gemini" class="headerlink" title="All in One Linked List Code (by Gemini)"></a>All in One Linked List Code (by Gemini)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file linked_list_complete.c</span></span><br><span class="line"><span class="comment"> * @brief A comprehensive, all-in-one example of a singly linked list in C.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This file contains the data structure definition and all essential operations:</span></span><br><span class="line"><span class="comment"> * - Creation of a node</span></span><br><span class="line"><span class="comment"> * - Insertion (at beginning, at end, after a specific node)</span></span><br><span class="line"><span class="comment"> * - Deletion (by key)</span></span><br><span class="line"><span class="comment"> * - Searching (by key)</span></span><br><span class="line"><span class="comment"> * - Printing the list</span></span><br><span class="line"><span class="comment"> * - Freeing the entire list to prevent memory leaks</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The main() function provides a step-by-step demonstration of these operations.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A node in a singly linked list</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- Function Prototypes ---</span></span><br><span class="line">Node* <span class="title function_">createNode</span><span class="params">(<span class="type">int</span> data)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(Node* head)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insertAtBeginning</span><span class="params">(Node** head_ref, <span class="type">int</span> new_data)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insertAtEnd</span><span class="params">(Node** head_ref, <span class="type">int</span> new_data)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insertAfter</span><span class="params">(Node* prev_node, <span class="type">int</span> new_data)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteNode</span><span class="params">(Node** head_ref, <span class="type">int</span> key)</span>;</span><br><span class="line">Node* <span class="title function_">search</span><span class="params">(Node* head, <span class="type">int</span> key)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">freeList</span><span class="params">(Node** head_ref)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// --- Main Driver Program ---</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Start with an empty list</span></span><br><span class="line">    Node* head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Initial list:\n&quot;</span>);</span><br><span class="line">    printList(head);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\\\\\\\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --- Insertion Operations ---</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Inserting 10 at the end.\n&quot;</span>);</span><br><span class="line">    insertAtEnd(&amp;head, <span class="number">10</span>);</span><br><span class="line">    printList(head);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Inserting 20 at the end.\n&quot;</span>);</span><br><span class="line">    insertAtEnd(&amp;head, <span class="number">20</span>);</span><br><span class="line">    printList(head);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Inserting 5 at the beginning.\n&quot;</span>);</span><br><span class="line">    insertAtBeginning(&amp;head, <span class="number">5</span>);</span><br><span class="line">    printList(head); <span class="comment">// List should be: 5 -&gt; 10 -&gt; 20 -&gt; NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Inserting 15 after node with value 10.\n&quot;</span>);</span><br><span class="line">    Node* node_10 = search(head, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (node_10 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        insertAfter(node_10, <span class="number">15</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    printList(head); <span class="comment">// List should be: 5 -&gt; 10 -&gt; 15 -&gt; 20 -&gt; NULL</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\\\\\\\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --- Search Operation ---</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Searching for node with value 15...\n&quot;</span>);</span><br><span class="line">    Node* found_node = search(head, <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">if</span> (found_node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Found node with value: %d\n&quot;</span>, found_node-&gt;data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Node not found.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Searching for node with value 99...\n&quot;</span>);</span><br><span class="line">    found_node = search(head, <span class="number">99</span>);</span><br><span class="line">    <span class="keyword">if</span> (found_node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Found node with value: %d\n&quot;</span>, found_node-&gt;data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Node with value 99 not found.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\\\\\\\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// --- Deletion Operations ---</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Current list before deletions:\n&quot;</span>);</span><br><span class="line">    printList(head);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Deleting node with value 10 (middle node).\n&quot;</span>);</span><br><span class="line">    deleteNode(&amp;head, <span class="number">10</span>);</span><br><span class="line">    printList(head); <span class="comment">// List should be: 5 -&gt; 15 -&gt; 20 -&gt; NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Deleting node with value 5 (head node).\n&quot;</span>);</span><br><span class="line">    deleteNode(&amp;head, <span class="number">5</span>);</span><br><span class="line">    printList(head); <span class="comment">// List should be: 15 -&gt; 20 -&gt; NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Deleting node with value 20 (tail node).\n&quot;</span>);</span><br><span class="line">    deleteNode(&amp;head, <span class="number">20</span>);</span><br><span class="line">    printList(head); <span class="comment">// List should be: 15 -&gt; NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Trying to delete a non-existent node (value 100).\n&quot;</span>);</span><br><span class="line">    deleteNode(&amp;head, <span class="number">100</span>);</span><br><span class="line">    printList(head); <span class="comment">// List should be unchanged: 15 -&gt; NULL</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\\\\\\\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --- Memory Management ---</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Freeing the entire list...\n&quot;</span>);</span><br><span class="line">    freeList(&amp;head);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;List after freeing:\n&quot;</span>);</span><br><span class="line">    printList(head); <span class="comment">// Should print &quot;NULL&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// --- Function Implementations ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Creates a new node with the given data and allocates memory for it.</span></span><br><span class="line"><span class="comment"> * @param data The integer value for the new node.</span></span><br><span class="line"><span class="comment"> * @return A pointer to the newly created node. Returns NULL on allocation failure.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Node* <span class="title function_">createNode</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span> (newNode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Memory allocation failed!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>); <span class="comment">// Exit if malloc fails</span></span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Prints the contents of the linked list from head to tail.</span></span><br><span class="line"><span class="comment"> * @param head The head node of the list.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(Node* head)</span> &#123;</span><br><span class="line">    Node* current = head;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, current-&gt;data);</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Inserts a new node at the beginning of the list.</span></span><br><span class="line"><span class="comment"> * @param head_ref A pointer to the head pointer of the list.</span></span><br><span class="line"><span class="comment"> * @param new_data The data for the new node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertAtBeginning</span><span class="params">(Node** head_ref, <span class="type">int</span> new_data)</span> &#123;</span><br><span class="line">    Node* newNode = createNode(new_data);</span><br><span class="line">    newNode-&gt;next = *head_ref; <span class="comment">// New node points to the old head</span></span><br><span class="line">    *head_ref = newNode;       <span class="comment">// Head pointer now points to the new node</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Inserts a new node at the end of the list.</span></span><br><span class="line"><span class="comment"> * @param head_ref A pointer to the head pointer of the list.</span></span><br><span class="line"><span class="comment"> * @param new_data The data for the new node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertAtEnd</span><span class="params">(Node** head_ref, <span class="type">int</span> new_data)</span> &#123;</span><br><span class="line">    Node* newNode = createNode(new_data);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// If the list is empty, the new node becomes the head</span></span><br><span class="line">    <span class="keyword">if</span> (*head_ref == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *head_ref = newNode;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Otherwise, traverse to the last node</span></span><br><span class="line">    Node* last = *head_ref;</span><br><span class="line">    <span class="keyword">while</span> (last-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        last = last-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Change the next of the last node</span></span><br><span class="line">    last-&gt;next = newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Inserts a new node after a given node.</span></span><br><span class="line"><span class="comment"> * @param prev_node The node after which to insert the new node. Cannot be NULL.</span></span><br><span class="line"><span class="comment"> * @param new_data The data for the new node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertAfter</span><span class="params">(Node* prev_node, <span class="type">int</span> new_data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (prev_node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Previous node cannot be NULL.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* newNode = createNode(new_data);</span><br><span class="line">    newNode-&gt;next = prev_node-&gt;next;</span><br><span class="line">    prev_node-&gt;next = newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Deletes the first occurrence of a node with the given key.</span></span><br><span class="line"><span class="comment"> * @param head_ref A pointer to the head pointer of the list.</span></span><br><span class="line"><span class="comment"> * @param key The data value of the node to be deleted.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteNode</span><span class="params">(Node** head_ref, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    Node* temp = *head_ref;</span><br><span class="line">    Node* prev = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Case 1: The head node itself holds the key</span></span><br><span class="line">    <span class="keyword">if</span> (temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;data == key) &#123;</span><br><span class="line">        *head_ref = temp-&gt;next; <span class="comment">// Change head</span></span><br><span class="line">        <span class="built_in">free</span>(temp);             <span class="comment">// Free old head</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Case 2: Search for the key, keeping track of the previous node</span></span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;data != key) &#123;</span><br><span class="line">        prev = temp;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Case 3: If the key was not present in the list</span></span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// Key not found, do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unlink the node from the list</span></span><br><span class="line">    prev-&gt;next = temp-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(temp); <span class="comment">// Free memory</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Searches for a node with the given key.</span></span><br><span class="line"><span class="comment"> * @param head The head node of the list.</span></span><br><span class="line"><span class="comment"> * @param key The value to search for.</span></span><br><span class="line"><span class="comment"> * @return A pointer to the first node with the key, or NULL if not found.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Node* <span class="title function_">search</span><span class="params">(Node* head, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    Node* current = head;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;data == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// Key not found</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Frees all nodes in the list to prevent memory leaks.</span></span><br><span class="line"><span class="comment"> * @param head_ref A pointer to the head pointer of the list.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeList</span><span class="params">(Node** head_ref)</span> &#123;</span><br><span class="line">    Node* current = *head_ref;</span><br><span class="line">    Node* nextNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        nextNode = current-&gt;next; <span class="comment">// Store the next node</span></span><br><span class="line">        <span class="built_in">free</span>(current);            <span class="comment">// Free the current node</span></span><br><span class="line">        current = nextNode;       <span class="comment">// Move to the next node</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the original head pointer to NULL to indicate the list is empty</span></span><br><span class="line">    *head_ref = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Outputs:<br>Initial list:<br>NULL<br>\\\<br>Inserting 10 at the end.<br>10 -&gt; NULL<br>Inserting 20 at the end.<br>10 -&gt; 20 -&gt; NULL<br>Inserting 5 at the beginning.<br>5 -&gt; 10 -&gt; 20 -&gt; NULL<br>Inserting 15 after node with value 10.<br>5 -&gt; 10 -&gt; 15 -&gt; 20 -&gt; NULL<br>\\\<br>Searching for node with value 15…<br>Found node with value: 15<br>Searching for node with value 99…<br>Node with value 99 not found.<br>\\\<br>Current list before deletions:<br>5 -&gt; 10 -&gt; 15 -&gt; 20 -&gt; NULL<br>Deleting node with value 10 (middle node).<br>5 -&gt; 15 -&gt; 20 -&gt; NULL<br>Deleting node with value 5 (head node).<br>15 -&gt; 20 -&gt; NULL<br>Deleting node with value 20 (tail node).<br>15 -&gt; NULL<br>Trying to delete a non-existent node (value 100).<br>15 -&gt; NULL<br>\\\<br>Freeing the entire list…<br>List after freeing:<br>NULL</p><p>Process finished with exit code 0</p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Notion </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Structure</title>
      <link href="/Structure/"/>
      <url>/Structure/</url>
      
        <content type="html"><![CDATA[<h1 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h1><p>link different data form together (int, float, char…)</p><p>it is a user-defined composite data type</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> day;</span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">&#125;; <span class="comment">// Don&#x27;t forget the semicolon!</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> studentID;</span><br><span class="line">    <span class="type">float</span> gpa;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Date</span> <span class="title">dob</span>;</span> <span class="comment">// Structs can contain other structs (nesting)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p><strong>Using Initializer Lists (at declaration):</strong> Similar to arrays. Values must be in the order members are defined.</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> <span class="title">today</span> =</span> &#123; <span class="number">25</span>, <span class="number">10</span>, <span class="number">2023</span> &#125;; <span class="comment">// today.day=25, today.month=10, ...</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">student1</span> =</span> &#123; <span class="string">&quot;Alice&quot;</span>, <span class="number">12345</span>, <span class="number">3.8</span>, &#123;<span class="number">15</span>, <span class="number">5</span>, <span class="number">2002</span>&#125; &#125;; <span class="comment">// Nested init</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Using Designated Initializers (C99+):</strong> More readable, less error-prone if the struct definition changes. Order doesn’t matter.</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">p1</span> =</span> &#123; .x = <span class="number">10</span>, .y = <span class="number">20</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">student2</span> =</span> &#123; .studentID = <span class="number">54321</span>, .name = <span class="string">&quot;Bob&quot;</span>, .gpa = <span class="number">3.5</span> &#125;;</span><br><span class="line"><span class="comment">// dob is uninitialized (or zeroed if static/global)</span></span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>Structs and Pointers (Very Important!)</strong></p><ul><li><p><strong>Declaring Pointers to Structs:</strong> struct <struct_tag_name> *<pointer_name>;</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">studentPtr</span>;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Assigning Address:</strong> Use the &amp; operator.</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">studentPtr = &amp;student1; <span class="comment">// studentPtr now points to student1</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Accessing Members via Pointers - The Arrow Operator (-&gt;):</strong> This is the standard, preferred way.</p><ul><li><p><strong>Syntax:</strong> <pointer_name>-&gt;<member_name></p></li><li><p><strong>Purpose:</strong> It dereferences the pointer <em>and</em> accesses the member in one step. It’s shorthand for (*pointer_name).member_name.</p></li><li><p><strong>Example:</strong></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Student ID via pointer: %d\n&quot;</span>, studentPtr-&gt;studentID);</span><br><span class="line">studentPtr-&gt;gpa = <span class="number">3.9</span>; <span class="comment">// Modify GPA via pointer</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Student DOB Day via pointer: %d\n&quot;</span>, studentPtr-&gt;dob.day); </span><br><span class="line"><span class="comment">// Mix -&gt; and .</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Accessing via Pointers - Dereference and Dot ((*).):</strong> Less common, more verbose, but shows the underlying mechanism.</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Student ID via (*).: %d\n&quot;</span>, (*studentPtr).studentID);</span><br></pre></td></tr></table></figure></li><li><p><strong>Dynamic Allocation:</strong> Structs are frequently used with malloc to create data on the heap (e.g., linked lists, trees). Remember free!</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">studentPtr = (<span class="keyword">struct</span> Student *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Student));</span><br><span class="line"><span class="keyword">if</span> (studentPtr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// strcpy(studentPtr-&gt;name, &quot;Charlie&quot;); // Use strcpy for strings!</span></span><br><span class="line">    studentPtr-&gt;studentID = <span class="number">98765</span>;</span><br><span class="line">    <span class="comment">// ... initialize other members ...</span></span><br><span class="line">    <span class="built_in">free</span>(studentPtr); <span class="comment">// Don&#x27;t forget to free!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>There are a few <strong>more ways</strong> to define and use <code>struct</code> in C, and it’s super useful to know the different styles. Here’s a rundown of the <strong>main syntaxes</strong> you’ll see:</p><hr><p><strong>Structs and Functions</strong></p><ul><li><p><strong>Passing by Value:</strong> A <em>copy</em> of the entire struct is passed. Changes inside the function don’t affect the original. Can be inefficient for large structs.</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printStudentByValue</span><span class="params">(<span class="keyword">struct</span> Student s)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ID: %d\n&quot;</span>, s.studentID);</span><br><span class="line">    s.studentID = <span class="number">0</span>; <span class="comment">// Changes only the local copy &#x27;s&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Call: printStudentByValue(student1);</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Passing by Pointer (Address):</strong> Pass the address (&amp;) of the struct. More efficient (only an address is copied). Allows the function to modify the original struct using the arrow (-&gt;) operator. This is the <em>most common</em> way.</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">promoteStudentByPointer</span><span class="params">(<span class="keyword">struct</span> Student *sp)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Promoting student ID: %d\n&quot;</span>, sp-&gt;studentID);</span><br><span class="line">    sp-&gt;gpa += <span class="number">0.1</span>; <span class="comment">// Modifies the original student&#x27;s GPA</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Call: promoteStudentByPointer(&amp;student1);</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Returning Structs:</strong> Functions can return struct variables (usually by value, so a copy is returned).</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Point <span class="title function_">createPoint</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">p</span> =</span> &#123; .x = x, .y = y &#125;;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Call: struct Point myPoint = createPoint(5, -2);</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="🔹-1-Classic-struct-no-typedef"><a href="#🔹-1-Classic-struct-no-typedef" class="headerlink" title="🔹 1. Classic struct, no typedef"></a>🔹 1. <strong>Classic struct, no typedef</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">a</span>;</span>          <span class="comment">// must use &#x27;struct&#x27; every time</span></span><br></pre></td></tr></table></figure><p>✔️ Simple and clear, but a bit wordy.</p><h3 id="🔹-2-Typedef-with-struct-tag"><a href="#🔹-2-Typedef-with-struct-tag" class="headerlink" title="🔹 2. Typedef with struct tag"></a>🔹 2. <strong>Typedef with struct tag</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line">Node a;                 </span><br><span class="line"><span class="comment">// now we can skip &#x27;struct&#x27;</span></span><br></pre></td></tr></table></figure><p>✔️ Very common in real-world code. Clean and flexible.</p><h3 id="🔹-3-Typedef-without-struct-tag"><a href="#🔹-3-Typedef-without-struct-tag" class="headerlink" title="🔹 3. Typedef without struct tag"></a>🔹 3. <strong>Typedef without struct tag</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br></pre></td></tr></table></figure><ul><li>Now you can <strong>only use <code>Node</code></strong>, there’s <strong>no <code>struct node</code></strong> type name.</li><li>Can’t refer to <code>struct node</code> anymore—just <code>Node</code>.</li></ul><p>✔️ Cleanest if you don’t need to reference the tag (<code>struct node</code>) anywhere else.</p><h3 id="🔹-4-Anonymous-struct-with-variable"><a href="#🔹-4-Anonymous-struct-with-variable" class="headerlink" title="🔹 4. Anonymous struct with variable"></a>🔹 4. <strong>Anonymous struct with variable</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">&#125; a, b;</span><br></pre></td></tr></table></figure><ul><li>No type name, no <code>typedef</code>.</li><li>Just defines variables <code>a</code> and <code>b</code> directly.</li></ul><p>🚫 Not reusable for other variables unless redefined.</p><h3 id="🔹-5-Define-and-declare-at-once"><a href="#🔹-5-Define-and-declare-at-once" class="headerlink" title="🔹 5. Define and declare at once"></a>🔹 5. <strong>Define and declare at once</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; node1, node2;</span><br></pre></td></tr></table></figure><p>✔️ Defines struct and declares variables in one shot.</p><h3 id="🔹-6-Forward-declaration-for-self-referencing"><a href="#🔹-6-Forward-declaration-for-self-referencing" class="headerlink" title="🔹 6. Forward declaration (for self-referencing)"></a>🔹 6. <strong>Forward declaration (for self-referencing)</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>;</span>  <span class="comment">// forward declaration</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span>  <span class="comment">// now this is valid</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>✔️ Used when you need to refer to the same struct type <strong>inside itself</strong> (like for linked lists or trees).</p><h3 id="🔚-Summary-Table"><a href="#🔚-Summary-Table" class="headerlink" title="🔚 Summary Table:"></a>🔚 Summary Table:</h3><table><thead><tr><th>Style</th><th>Reusable Type</th><th>Cleaner Syntax</th><th>Self-Reference</th></tr></thead><tbody><tr><td><code>struct node &#123;&#125;</code></td><td>✅ Yes</td><td>❌ No</td><td>✅ Yes</td></tr><tr><td><code>typedef struct node &#123;&#125; Node;</code></td><td>✅ Yes</td><td>✅ Yes</td><td>✅ Yes</td></tr><tr><td><code>typedef struct &#123;&#125;</code></td><td>✅ Yes</td><td>✅ Yes</td><td>❌ No name to refer to</td></tr><tr><td><code>struct &#123;&#125;</code> with variables</td><td>❌ No</td><td>✅ Quick</td><td>❌ No</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Notion </tag>
            
            <tag> Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pointer</title>
      <link href="/Pointer/"/>
      <url>/Pointer/</url>
      
        <content type="html"><![CDATA[<p><strong>Normal Variables (Value Variables):</strong></p><ul><li>Store their data value directly in the memory location allocated to the variable</li><li>When you access the variable, you directly access its value</li></ul><p><strong>Pointer Variables:</strong></p><ul><li>Store memory addresses as their values</li><li>Provide indirect access to data by storing the location (address) where the actual data is stored</li><li>Can be dereferenced to access or modify the value at the stored address</li></ul><p><strong>Reference</strong>:</p><ul><li>In the context of pointers, a “reference” is essentially the memory address that points to where data is stored</li><li>When we say a pointer “references” something, it means the pointer contains the memory address of that data</li><li>For example, if we have a pointer <code>p</code> that points to variable <code>x</code>, we say “p references x” or “p holds a reference to x”</li></ul><p><strong>Dereferencing</strong>:</p><ul><li>“Dereferencing” is the act of accessing or modifying the value stored at the memory address contained in a pointer</li><li>It means “follow this address to get to the actual data”</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* ptr;      <span class="comment">// Pointer to integer</span></span><br><span class="line"><span class="type">char</span>* str;     <span class="comment">// Pointer to character</span></span><br><span class="line"><span class="type">float</span>* fPtr;   <span class="comment">// Pointer to float</span></span><br><span class="line"><span class="type">int</span> *ptr;      <span class="comment">// Some programmers prefer this style</span></span><br><span class="line"><span class="type">char</span> *str;     <span class="comment">// The asterisk is placed next to the variable name</span></span><br><span class="line"></span><br><span class="line">**<span class="type">int</span>* p1, * p2;  <span class="comment">// Both are pointers to integers</span></span><br><span class="line"><span class="type">int</span> *p1, *p2;   <span class="comment">// Alternative style</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>** pPtr;    <span class="comment">// Pointer to a pointer to an integer</span></span><br><span class="line"><span class="type">char</span>*** pppChar; <span class="comment">// Triple pointer (pointer to pointer to pointer to char)</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* ptr;      <span class="comment">// Pointer to a constant integer (value can&#x27;t be changed)</span></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> ptr = &amp;x; <span class="comment">// Constant pointer (can&#x27;t point to another address)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> ptr = &amp;x; <span class="comment">// Constant pointer to constant integer</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* ptr;     <span class="comment">// Generic pointer that can point to any data type</span></span><br><span class="line"><span class="type">int</span> (*funcPtr)(<span class="type">int</span>, <span class="type">int</span>);  <span class="comment">// Pointer to function that takes two ints and returns int**</span></span><br></pre></td></tr></table></figure><blockquote><p>I know these notes are pretty dense and were mostly written for my own benefit. I’d be impressed if anyone besides me makes it to the end.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Notion </tag>
            
            <tag> Pointer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Time_Complexity</title>
      <link href="/Time-Complexity/"/>
      <url>/Time-Complexity/</url>
      
        <content type="html"><![CDATA[<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><ul><li><strong>Input</strong> – Takes zero or more inputs.</li><li><strong>Output</strong> – Produces at least one output.</li><li><strong>Definiteness</strong> – Each step is clearly and unambiguously defined.</li><li><strong>Finiteness</strong> – The algorithm must end after a finite number of steps.</li><li><strong>Effectiveness</strong> – Each step can be carried out exactly and in a finite amount of time.</li></ul><h2 id="Pseudocode"><a href="#Pseudocode" class="headerlink" title="Pseudocode"></a>Pseudocode</h2><p><img src="/Time-Complexity/03c158fd-1e4d-4483-a28d-9d4586d21611.png" alt="4.jpg"></p><h2 id="Flow-Chart"><a href="#Flow-Chart" class="headerlink" title="Flow Chart"></a>Flow Chart</h2><p><img src="/Time-Complexity/bb35518d-70b5-4dcd-860d-f9aef2526028.png" alt="5.jpg"></p><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h2><p>The cost of time while executing an algorithm.</p><p>evaluate by the number of executions</p><p>comments, bracket, and funciton &amp; variable declaration don’t count</p><p>initialization of variable while declaring count </p><p>function call count</p><p>indicate as T(n)</p><p>BIG-O : Worst-Case analysis</p><p>f(n ) ≤ c ⋅ g(n)</p><pre><code>Θ     : Average-Case analysis</code></pre><p>c1 ⋅ g(n) ≤ f(n) ≤ c2 ⋅ g(n)</p><pre><code>Ω     : Best-Case analysis</code></pre><p>f(n) ≥ c ⋅ g(n)</p><p><img src="/Time-Complexity/33.jpg" alt="33.jpg"></p><h2 id="Space-Complexity"><a href="#Space-Complexity" class="headerlink" title="Space Complexity"></a>Space Complexity</h2><p>S(P) &#x3D; C + SP(I)</p><p>C : Fixed Space Requirement (Constant)</p><p>SP(I) : Variable Space Requirement (Variable)</p><p><img src="/Time-Complexity/38.jpg" alt="38.jpg"></p><p><img src="/Time-Complexity/113663e3-eb67-4c57-891d-7aae44067da7.png" alt="39.jpg"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">addition</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a+b+b*c*(a+b+c)/(a+b)+<span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>There is no structure variable and recusive call, so SP(I) &#x3D; 0.</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">addition</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span>&#123;</span><br><span class="line"><span class="type">int</span> average;</span><br><span class="line">average = (a+b+c+d)/<span class="number">4</span>;</span><br><span class="line"><span class="keyword">return</span> average;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>addition function has 4 references and a return value, declaration of int takes 4 bytes. Therefore, fixed space requires CS (4+1) * 4 bytes &#x3D; 20 bytes</strong></p><p><strong>addition function does not contain dynamic allocate memory. SP &#x3D; 0 byte</strong></p><p><strong>S(P) &#x3D; CS + SP(I) &#x3D; 20 + 0 &#x3D; 20 bytes</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="title function_">sum</span><span class="params">(<span class="type">float</span> <span class="built_in">list</span>[], <span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="type">float</span> tempsum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">tempsum += <span class="built_in">list</span> [i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tempsum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SP(I):</strong></p><p><strong>no stack space cost (no recursive call)</strong></p><p><strong>possess structure variable (analyze if it is called by value):</strong></p><p><strong>4*n - if list[ ] is called by value (determine by main function’s  array length)</strong></p><p><strong>0 or C - if list[ ] is called by address (main function only pass head address)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="title function_">rsum</span><span class="params">(<span class="type">float</span> <span class="built_in">list</span>[], <span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> rsum(<span class="built_in">list</span>, n<span class="number">-1</span>) + <span class="built_in">list</span>[n<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>We assumed int takes 4 bytes, float takes 4 bytes, address takes 2 bytes and list[ ] is called by address .</strong></p><p><strong>SP (I) : possess structure variable, but it is not called by value.</strong> </p><p><strong>there is stack space cost (recursive call)</strong></p><p><strong>stack spaces for each recursive call:</strong></p><p><strong>SP(I)&#x3D;list head address + n + return address &#x3D; 2 + 4 + 2&#x3D;8</strong></p><p><strong>n times recursive calls SP(I) &#x3D; 8n bytes</strong></p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Notion </tag>
            
            <tag> Time_Complexity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array</title>
      <link href="/Array/"/>
      <url>/Array/</url>
      
        <content type="html"><![CDATA[<h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><p>In C it is a fixed-size, ordered, and homogeneous sert.</p><p>Search of an array starts with 0.</p><p>If an array is declared without initialization, the elements will contain garbage values whatever that found in the memory.</p><p>Anything may happen if you try to access to index out of range.</p><p>Arrays store values contiguously in the memory.</p><ul><li>Traversal - This operation is used to print the elements of the array.</li><li>Insertion - It is used to add an element at a particular index.</li><li>Deletion - It is used to delete an element from a particular index.</li><li>Search - It is used to search an element using the given index or by the value.</li><li>Update - It updates an element at a particular index.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// array declaration without initialization</span></span><br><span class="line"><span class="type">int</span> arr0[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// array initialization using initialier list</span></span><br><span class="line"><span class="type">int</span> arr1[<span class="number">5</span>] = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array initialization using initializer list </span></span><br><span class="line"><span class="comment">// without specifying size</span></span><br><span class="line"><span class="type">int</span> arr2[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr3[<span class="number">9</span>] = &#123; <span class="number">0</span>, [<span class="number">1</span> ... <span class="number">7</span>] = <span class="number">10</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array initialization using loop</span></span><br><span class="line"><span class="type">float</span> arr4[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">arr4[i] = (<span class="type">float</span>)i * <span class="number">2.1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize all elements to 0</span></span><br><span class="line"><span class="comment">// only for 0</span></span><br><span class="line"><span class="type">int</span> arr5[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2D array initialization using </span></span><br><span class="line"><span class="comment">// initializer list</span></span><br><span class="line"><span class="type">int</span> arr6[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// find the size of an array</span></span><br><span class="line"><span class="type">int</span> size = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>Cons of Arrays in C</p><p>No push&#x2F;pop&#x2F;insert&#x2F;delete — you do everything manually.</p><hr><p>You can’t store mixed data types like in Python lists.</p><hr><p>Accessing <code>arr[9999]</code> won’t throw an error — it’ll just break stuff silently (undefined behavior).</p><p>When NOT to Use Arrays</p><p>When Frequent insert&#x2F;delelte is required.</p><p>Alternative : Use <strong>linked list</strong>, <strong>dynamic array</strong>, or <strong>queue</strong></p><hr><p>You don’t know the number of elements in advance.</p><p>Alternative : Use <strong><code>malloc</code> + realloc</strong>, or <strong>linked structures</strong></p><hr><p>You want to store mixed types.</p><p>Alternative : Use <strong><code>struct</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Data Structure </tag>
            
            <tag> Notion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Recursion</title>
      <link href="/Recursion-Data-Structure/"/>
      <url>/Recursion-Data-Structure/</url>
      
        <content type="html"><![CDATA[<p><strong>Non-recursive methods</strong> (while, repeat until…) are often more efficient.<br><strong>Recursion</strong> involves additional overhead and can consume more memory due to the call stack (e.g., push and pop operations).</p><p>Recursion Examples:<br>Factorial, Fibonacci Number, G.C.D., Binomial Coefficient, Ackermann’s Funciton, Tower of Hanoi, Permutation</p><p><strong>Base Case</strong>: The condition that ends the recursion.<br><strong>General Case</strong>: The function that makes the next recursive call.</p><p>Tower of Hanoi:</p><p><img src="/Recursion-Data-Structure/xnb8bdgl.png" alt="Image"><br>You can figure the following code out easily by considering case: n&#x3D;3.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> source_peg, <span class="type">char</span> helping_peg,<span class="type">char</span> destination_peg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Move disk %d from %c to %c\n&quot;</span>, n, source_peg, destination_peg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        hanoi(n<span class="number">-1</span>, source_peg, destination_peg, helping_peg);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Move disk %d from %c to %c\n&quot;</span>, n, source_peg, destination_peg);</span><br><span class="line">        hanoi(n<span class="number">-1</span>, helping_peg, source_peg, destination_peg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    hanoi(n,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Notion </tag>
            
            <tag> Recursion </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
